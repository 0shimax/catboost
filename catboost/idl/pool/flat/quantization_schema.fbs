namespace NCB.NIdl;

// Describes data necessary for feature quantization. Depending on whether feature is numeric or
// categorical one of `Borders` or `UniqueHashes` will not be null. Chunk itself doesn't store
// information on feature index it presents schema for, it's expected that user will store this
// information somewhere.
//
table TFeatureQuantizationSchema {
    // Sorted (asc.) border values for numeric feature.
    Borders:[float];

    // Sorted (asc.) unique hash values for categorical feature.
    UniqueHashes:[uint];
}

// Describes schemas for feature quantization for a number of features. Since for categorical
// features size of `UniqueHashes` may grow very large, you may want to split pool quantization
// schema in a number of partial schemas, for example:
//
// | feature_offset | schemas_count | schemas_blob |
//
// Where:
// - `feature_offset` -- index of the first feature whose quanization schema is present within
//     `schemas_blob`.
// - `schemas_count` -- number of quantization schemas present within `schemas_blob`.
// - `schemas_blob` -- blob than can be read with `GetRoot<TFeatureQuanizationSchemas>(chunk.data())`
//
table TFeatureQuantizationSchemas {
    Schemas:[TFeatureQuantizationSchema];
}
