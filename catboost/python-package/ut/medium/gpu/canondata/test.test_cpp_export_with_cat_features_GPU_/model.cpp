#include <cassert>
#include <string>
#include <vector>
#include <unordered_map>

typedef unsigned long long int TCatboostCPPExportModelCtrBaseHash;

enum class ECatboostCPPExportModelCtrType {
    Borders,
    Buckets,
    BinarizedTargetMeanValue,
    FloatTargetMeanValue,
    Counter,
    FeatureFreq,
    CtrTypesCount
};

struct TCatboostCPPExportModelCtr {
    TCatboostCPPExportModelCtrBaseHash BaseHash;
    ECatboostCPPExportModelCtrType BaseCtrType;
    int TargetBorderIdx = 0;
    float PriorNum = 0.0f;
    float PriorDenom = 1.0f;
    float Shift = 0.0f;
    float Scale = 1.0f;

    inline float Calc(float countInClass, float totalCount) const {
        float ctr = (countInClass + PriorNum) / (totalCount + PriorDenom);
        return (ctr + Shift) * Scale;
    }
};

struct TCatboostCPPExportFloatSplit {
    int FloatFeature = 0;
    float Split = 0.f;
};

struct TCatboostCPPExportOneHotSplit {
    int CatFeatureIdx = 0;
    int Value = 0;
};

struct TCatboostCPPExportBinFeatureIndexValue {
    unsigned int BinIndex = 0;
    bool CheckValueEqual = 0;
    unsigned char Value = 0;
};

struct TCatboostCPPExportCtrMeanHistory {
    float Sum;
    int Count;
};

struct TCatboostCPPExportCtrValueTable {
    std::unordered_map<TCatboostCPPExportModelCtrBaseHash, unsigned int> IndexHashViewer;
    int TargetClassesCount;
    int CounterDenominator;
    std::vector<TCatboostCPPExportCtrMeanHistory> CtrMeanHistory;
    std::vector<int> CtrTotal;
    const unsigned int* ResolveHashIndex(TCatboostCPPExportModelCtrBaseHash hash) const {
        auto search = IndexHashViewer.find(hash);
        if (search == IndexHashViewer.end()) {
            return NULL;
        }
        return &search->second;
    }
};

struct TCatboostCPPExportCtrData {
    std::unordered_map<TCatboostCPPExportModelCtrBaseHash, TCatboostCPPExportCtrValueTable> LearnCtrs;
};

struct TCatboostCPPExportCompressedModelCtr {
    struct TCatboostCPPExportProjection {
        std::vector<int> transposedCatFeatureIndexes;
        std::vector<TCatboostCPPExportBinFeatureIndexValue> binarizedIndexes;
    } Projection;
    std::vector<TCatboostCPPExportModelCtr> ModelCtrs;
};

struct TCatboostCPPExportModelCtrs {
    unsigned int UsedModelCtrsCount;
    std::vector<TCatboostCPPExportCompressedModelCtr> CompressedModelCtrs;
    TCatboostCPPExportCtrData CtrData;
};

/* Model data */
static const struct CatboostModel {
    CatboostModel() {};
    unsigned int FloatFeatureCount = 6;
    unsigned int CatFeatureCount = 11;
    unsigned int BinaryFeatureCount = 31;
    unsigned int TreeCount = 20;
    std::vector<std::vector<float>> FloatFeatureBorders = {
        {30.5, 36.5, 37.5, 41.5, 46.5, 51.5, 60.5},
        {66768, 129787.5, 202819.5, 215992, 218145.5, 222939, 318173.5, 325462, 337225.5, 380248},
        {9.5, 10.5, 12.5, 13.5},
        {3280},
        {},
        {31.5, 46.5}
    };
    std::vector<unsigned int> TreeDepth = {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6};
    std::vector<unsigned int> TreeSplits = {51, 25, 36, 6, 21, 24, 30, 46, 43, 47, 18, 31, 49, 3, 38, 27, 0, 75, 21, 52, 23, 18, 15, 44, 46, 19, 14, 77, 10, 8, 50, 25, 6, 73, 58, 24, 1, 65, 60, 5, 56, 35, 66, 28, 62, 3, 33, 57, 50, 71, 24, 78, 23, 12, 48, 18, 54, 64, 29, 73, 23, 52, 15, 26, 13, 76, 52, 18, 74, 45, 24, 11, 52, 0, 44, 53, 16, 17, 52, 2, 70, 37, 39, 32, 52, 41, 21, 24, 7, 43, 49, 34, 42, 55, 1, 22, 52, 61, 45, 9, 23, 63, 21, 72, 68, 20, 4, 45, 52, 60, 23, 44, 67, 40, 23, 21, 24, 59, 69, 49};
    std::vector<unsigned char> TreeSplitIdxs = {4, 1, 1, 7, 1, 255, 1, 1, 2, 1, 2, 2, 2, 4, 3, 3, 1, 1, 1, 1, 2, 2, 9, 3, 1, 3, 8, 2, 4, 2, 3, 1, 7, 2, 1, 255, 2, 3, 2, 6, 1, 3, 1, 1, 2, 4, 1, 2, 3, 1, 255, 3, 2, 6, 1, 2, 2, 2, 1, 2, 2, 1, 9, 2, 7, 1, 1, 2, 1, 4, 255, 5, 1, 1, 3, 1, 10, 1, 1, 3, 2, 2, 4, 3, 1, 2, 1, 255, 1, 2, 2, 2, 1, 3, 2, 1, 1, 1, 4, 3, 2, 1, 1, 1, 3, 4, 5, 4, 1, 2, 2, 3, 2, 1, 2, 1, 255, 1, 1, 2};
    std::vector<unsigned short> TreeSplitFeatureIndex = {16, 6, 11, 0, 3, 5, 9, 14, 13, 15, 2, 9, 16, 0, 11, 6, 0, 29, 3, 17, 4, 2, 1, 13, 14, 2, 1, 30, 1, 1, 16, 6, 0, 27, 20, 5, 0, 23, 21, 0, 19, 10, 24, 7, 22, 0, 10, 19, 16, 26, 5, 30, 4, 1, 16, 2, 18, 23, 8, 27, 4, 17, 1, 6, 1, 30, 17, 2, 28, 13, 5, 1, 17, 0, 13, 18, 1, 2, 17, 0, 25, 11, 11, 9, 17, 12, 3, 5, 1, 13, 16, 10, 13, 18, 0, 4, 17, 22, 13, 1, 4, 23, 3, 27, 24, 2, 0, 13, 17, 21, 4, 13, 24, 12, 4, 3, 5, 21, 25, 16};
    std::vector<unsigned char> TreeSplitXorMask = {0, 0, 0, 0, 0, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 0, 0, 0};
    std::vector<unsigned int> CatFeaturesIndex = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    std::vector<unsigned int> OneHotCatFeatureIndex = {9};
    std::vector<std::vector<int>> OneHotHashValues = {
        {-1291328762}
    };
    std::vector<std::vector<float>> CtrFeatureBorders = {
        {0.599734068f, 0.708776593f, 0.763297915f},
        {0.773214281f},
        {0.800000012f},
        {0.0539215691f, 0.0784313753f, 0.377451003f},
        {0.286458343f, 0.515625f, 0.859375f},
        {0.471354157f, 0.604166627f, 0.6484375f, 0.78125f},
        {0.625f, 0.700000048f},
        {0.0147058833f, 0.142156869f, 0.191176474f, 0.235294133f},
        {0.608108103f},
        {0.471621633f},
        {0.662500024f, 0.700000048f, 0.737500012f, 0.925000072f},
        {0.387254894f},
        {0.403846145f, 0.461538464f, 0.865384638f},
        {0.561298072f, 0.917067289f},
        {0.75f},
        {0.0539215691f, 0.142156869f},
        {0.477272719f, 0.715909064f},
        {0.497869313f, 0.657670498f, 0.764204562f},
        {0.578125f, 0.625f, 0.765625f},
        {0.6875f, 0.802083373f},
        {0.7890625f},
        {0.0882352963f, 0.460784316f},
        {0.805921078f},
        {0.734375f},
        {0.6875f, 0.833333373f, 0.958333373f}
    };

    /* Aggregated array of leaf values for trees. Each tree is represented by a separate line: */
    double LeafValues[1280] = {
        0.7821782231330872, 0.7838118672370911, 0.7821782231330872, 0.7821782231330872, 0.7763118743896484, 0.7845792174339294, 0.7854455709457397, 0.7877793312072754, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7838118672370911, 0.7821782231330872, 0.7838118672370911, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7727921009063721, 0.7821782231330872, 0.7687694430351257, 0.7859123349189758, 0.7732013463973999, 0.7859123349189758, 0.7823672294616699, 0.7878960371017456, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7838118672370911, 0.7763118743896484, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7763118743896484, 0.7821782231330872, 0.7727921009063721, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7727921009063721, 0.7821782231330872,
        0, 0, 0, 0, -0.009297078475356102, 0.001700989902019501, 0, 0, 0.001621410949155688, 0.001621410949155688, 0, 0.002585049252957106, -0.005799009930342436, -0.005795940756797791, 0.001615655841305852, 0.003653571242466569, -0.009294623509049416, -0.003251824760809541, 0, 0, -0.005822339095175266, 0, 0, 0, -0.005799009930342436, 0, 0, 0.001605657394975424, 0, 0, 0.002545947907492518, 0.001621410949155688, 0, 0.002611593110486865, 0, 0, 0, 0.001236180076375604, 0, 0, 0, 0.003219705540686846, 0, 0.004242468159645796, 0, -0.0001582589757163078, 0, 0.005418002139776945, 0, -0.009251824580132961, 0, 0, 0, -0.003349425969645381, 0, 0, 0, -0.01034590601921082, 0, 0.003671074751764536, 0, -0.003344227792695165, 0, 0.005021915771067142,
        -0.005729621276259422, 0.002586163347586989, 0, 0, 0, 0.002540178829804063, 0, 0, 0, 0, 0, 0, 0.003716115141287446, 0.003131901612505317, 0, 0, 0, 0.001581509481184185, -0.001592128886841238, -0.005806750152260065, 0, 0, -0.003232839517295361, 0, 0, 0.001591966603882611, 0, 0.002609100891277194, -0.0057708197273314, 0.002485684584826231, 0, 0.001553990528918803, 0, 0, 0, 0, 0, 0.004578427877277136, 0, 0, 0.001686752657406032, 0.001578124589286745, 0, 0, 0.001622974290512502, 0.005245636682957411, 0, 0, 0, 0.001593878027051687, -0.0131244994699955, 0.002551906509324908, 0, 0, -0.0131652969866991, 0.004250694066286087, -0.009107647463679314, 0, -0.009182669222354889, 0.002498466521501541, -0.0007170537719503045, 0.003877722192555666, -0.003410371253266931, 0.00354538531973958,
        0.004751998465508223, 0, 0.002610269235447049, 0, 0.0015196189051494, 0, 0, 0, 0.005056214518845081, 0, -0.008835854940116405, -0.01141801010817289, 0.003571471897885203, 0, -0.01584138721227646, -0.005679931491613388, 0.001569648389704525, 0, 0.001613475615158677, 0, 0, 0, 0, 0, 0.003518593963235617, 0, 0.002729137428104877, 0, 0, 0, 0, 0, 0.005292917136102915, 0, -0.0003432609664741904, -0.009162852540612221, 0.001552624395117164, 0, -0.009370109066367149, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.004081177990883589, 0, 0, 0, 0, 0, 0.001712478697299957, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        -0.0001207132590934634, 0.004465274047106504, -0.008598595857620239, 0.002369570080190897, 0, 0, 0, 0, 0.001529655768536031, 0, -0.005696930456906557, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.003959205001592636, 0.004797241650521755, -0.008468863554298878, 0.003481680760160089, 0, 0, 0, 0, 0, 0, -0.005641904193907976, 0.001514712232165039, 0, 0, 0, 0, -0.001233555260114372, 0.003726610913872719, -0.01110441237688065, 0.003760109189897776, 0.003303095465525985, 0.003743232926353812, 0.001716851140372455, 0.003447272116318345, 0.001597677823156118, 0, 0, 0, -0.003250003326684237, 0.002425220794975758, 0, 0,
        0, 0.001492768642492592, 0, 0.002415190916508436, 0, 0, 0, 0, 0, 0.003729024669155478, 0.002698980970308185, 0.003318552626296878, 0, 0, 0, 0, 0, 0, 0.001628860365599394, 0.00145136471837759, 0, 0.001542635378427804, 0, 0.00157142395619303, -0.005621602758765221, -0.0005564462044276297, 0, 0.004591463133692741, 0, 0, 0, 0, 0, 0, 0, 0.002528486307710409, 0, 0, 0, 0, -0.01104456000030041, 0.001457466278225183, -0.01345493365079165, 0.001505658030509949, 0, 0, -0.005596129689365625, 0.001511247712187469, -0.005596005357801914, 0, 0.002689692657440901, 0.004132781643420458, 0, 0, 0, 0, -0.008425132371485233, 0.003023817902430892, 0.0004841776681132615, 0.004926365334540606, 0, 0, -0.005555315874516964, 0,
        -0.003143457928672433, -0.002981132129207253, 0.004180249758064747, 0.001413419959135354, 0.001715951249934733, -0.01095201540738344, 0.001451392890885472, 0.001489921938627958, 0, -0.00856306217610836, 0, 0.001446535461582243, 0, -0.001514818635769188, 0, 0.0029737688601017, 0.004786678589880466, -0.01292825490236282, 0.004963067825883627, 0.002901030471548438, -0.005498677957803011, -0.001343240379355848, 0.004207320977002382, 0, 0, -0.006757824681699276, 0, 0.003738560015335679, 0, -0.0003027751517947763, 0, 0.002291887532919645, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.005562117323279381, 0, 0, 0, 0, 0, 0, 0.001628200523555279, 0, 0, 0, 0, -0.003201456507667899, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        -0.005530459806323051, 0.003164333058521152, 0, 0.00236542709171772, 0, 0, 0, 0, 0.00178952154237777, -0.01131695695221424, -0.005973456893116236, -0.00292279664427042, 0, 0.001441539847292006, 0, 0.002302534412592649, 0, 0, -0.003581657307222486, 0.004272609483450651, 0, 0.004152561537921429, 0, 0.0048816935159266, -0.008488217368721962, 0, -0.005213931668549776, -0.001595681300386786, 0, 0.003354955231770873, 0, 0.003996808081865311, 0, 0, 0, 0, 0, 0, 0, 0.001426658476702869, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.003178233047947288, 0, -0.005482478998601437, 0, 0, 0, 0.001503026345744729, 0, 0,
        -0.001441380125470459, 0.004223291296511889, 0, 0.004047178663313389, -0.00417760107666254, 0.004234023857861757, -0.003186510177329183, 0.003661580150946975, 0, 0.001491600996814668, 0, -0.005483012646436691, -0.003086039330810308, 0, 0, 0.00139852031134069, 0, 0.002449741121381521, 0, 0, -0.01515667326748371, 0.002854540245607495, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.003899478120729327, 0.001548699452541769, 0, -0.0003189043782185763, 0.003701426787301898, 0.001672705984674394, 0.002738562179729342, 0, 0.001418909057974815, 0, 0.001424676273018122, 0, 0.001558198477141559, -0.005488981027156115, 0, 0, 0, 0, 0, 0.001852395245805383, 0.00138977135065943, -0.01055358722805977, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, -0.005447813775390387, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.002228721510618925, 0, 0, 0, 0, 0, 0.001677107531577349, 0.002723475685343146, 0, 0.001537084113806486, 0, 0, 0.001480413950048387, 0, 0.001362728886306286, 0, 0.003674927400425076, 0, 0.003196449251845479, -0.005454347934573889, 0, -0.005106732714921236, 0, -0.006074273493140936, 0, -0.008465711958706379, 0, 0, 0.002229629084467888, 0, 0.001423340057954192, 0, 0.001319761737249792, 0, 0.002729682018980384, -0.001358307315967977, 0.00154651200864464, -0.009097782894968987, -0.00322474935092032, -0.0005334143061190844, 0.001411435077898204, -0.01051049120724201, 0, 0, 0.003352800384163857, -0.005282668862491846, 0.003544028848409653, 0, 0.004686921834945679, 0, 0.00341045344248414,
        0, 0.001617135014384985, 0.001679384266026318, -0.005093459039926529, 0, 0, 0, 0, 0.001400849316269159, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.001846725004725158, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.004506799858063459, 0.0013612424954772, -0.0143651207908988, -0.01175682619214058, 0, 0, 0, 0, 0.004783974029123783, 0.002747132908552885, 0.000592846714425832, -0.01324266567826271, 0, 0, 0, 0, 0, 0, -0.005406955257058144, 0, 0.00322199915535748, 0, 0, 0.001884059165604413, 0, 0.00135376991238445, -0.005189194343984127, 0, 0.00378523301333189, 0, 0.002429578918963671, 0,
        0.003995611798018217, 0, 0.00364333763718605, -0.002804340096190572, 0, 0, 0, 0, 0.003230700735002756, -0.002974034985527396, 0, 0, 0, 0, 0, 0, 0.003627191996201873, -0.003558909520506859, 0.003816502634435892, -0.01494337897747755, 0, 0, 0, 0, 0.003253757953643799, -0.004317996092140675, 0, 0, 0, 0, 0, 0, 0.001367380260489881, 0, 0.00332819833420217, 0.001507333945482969, 0, 0, 0, 0, 0.002587185706943274, 0, 0, 0, 0, 0, 0, 0, 0.003104964504018426, 0.003808687208220363, 0.002684100065380335, -0.01059156842529774, 0, 0, 0, 0, 0.002906937152147293, 0.0005937512032687664, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0.001638223882764578, 0.00260894070379436, 0, 0.002532311948016286, -0.005310154519975185, 0.003300566226243973, 0, 0.003428873838856816, 0.00174367637373507, 0.003103039925917983, 0.003193652490153909, 0.002561431610956788, -0.00376598909497261, 0, 0, 0.001487461035139859, 0, 0, 0, 0, 0, 0, 0, 0, 0.001464630477130413, 0, 0, 0.002525429474189878, 0, 0.003042129334062338, -0.005286965984851122, 0.002872760873287916, -0.01220226101577282, 0, 0, 0.001357124885544181, 0.001845729886554182, 0.003422540379688144, 0.002657281933352351, 0.00348997232504189, -0.0133323771879077, 0.003545615822076797, 0.001613374566659331, 0, -0.005416579078882933, 0, 0, 0.002148620551452041, 0, 0.001299700583331287, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.001841363729909062,
        0, -0.005247313529253006, 0.002740626456215978, -0.01097937487065792, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.003803875762969255, 0, 0.002995430724695325, -0.01073585543781519, 0.001273885136470199, 0, 0.002162711462005973, 0, 0.003141414374113083, -0.002666004467755556, 0.003216136945411563, -0.007454714737832546, 0, 0, 0, 0, 0.003548051696270704, 0.002443936187773943, 0.002064050873741508, 0.00173059874214232, 0.001287873368710279, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.004039376508444548, -0.000719947915058583, 0.002856644103303552, -0.002724447753280401, 0.002475501270964742, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0.001554358866997063, 0, 0.001154666417278349, 0, 0, 0, 0, 0, 0.001309438375756145, 0.001496094162575901, 0.003648426150903106, -0.005115071311593056, 0, 0, 0, 0, 0.002555225742980838, -0.01271465979516506, 0.003108062082901597, -0.003186133457347751, 0, -0.004849372897297144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.001184916822239757, -0.005389364901930094, 0, 0, 0, 0, 0, 0, 0.004328674171119928, -0.001146320719271898, 0, 0, 0, 0, 0, 0, 0.004284887108951807, 0.0001996157225221395, 0, 0, 0, -0.01288401614874601,
        0, 0, 0, 0, 0.001484873588196933, 0.001993460115045309, 0.001571222790516913, 0.003451762953773141, 0, 0, 0, 0, 0, 0.00123162567615509, 0, 0.001184973982162774, 0, 0, 0, 0, 0, 0, 0.001666284282691777, 0.001221626414917409, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.003906658384948969, 0.003179804421961308, 0.002014763187617064, 0.004175473470240831, 0, 0, 0, 0, 0, 0, 0, 0.001173866097815335, 0.002110069151967764, 0, 0, 0, -0.010565803386271, 0.001879393239505589, -0.007360712625086308, 0.003709348849952221, 0, 0, 0, 0, 0, 0, -0.007942177355289459, 0.001300769858062267,
        0, -0.0008923569112084806, 0, 0, 0, -0.002777390880510211, 0, 0, 0, 0.001218067482113838, 0, 0, 0, -0.0003474426048342139, 0, 0, 0, -0.01086665410548449, 0, 0, 0, 0, 0, 0, 0, -0.002215028973296285, 0, 0, 0, 0, 0, 0, 0.002228485886007547, -0.002784044714644551, 0.004067763686180115, -0.00552069116383791, 0, 0.002665845677256584, 0.003432545345276594, -0.005078021436929703, 0.00214909971691668, -0.00262005627155304, 0.003910503350198269, -0.001597474794834852, 0, 0.00178730022162199, 0.00343871396034956, -0.005136101040989161, 0, -0.004586241208016872, 0.002614380558952689, -0.005297607276588678, 0, 0, 0, 0, 0, 0, 0.002427996369078755, -0.00934960413724184, 0, 0, 0, 0,
        -0.005163898691534996, 0, -0.0001992042525671422, -0.005027367733418941, 0.002285047899931669, 0, 0.00417238287627697, 0, 0, 0, -0.01036902703344822, 0, 0, 0, 0.001255013630725443, -0.004692353773862123, 0, 0, 0.0004085823311470449, -0.009763318113982677, 0.001944475923664868, 0, 0.003477477468550205, 0, 0, 0, -0.00475085387006402, 0, 0, 0, -0.003913962747901678, 0, 0, 0, 0.004593062680214643, -0.005293742287904024, 0.001289863139390945, 0, 0.003650126280263066, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.01019193045794964, 0, 0, 0, 0.00228480389341712, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, -0.004693525843322277, 0, 0, 0, -0.004504682496190071, 0, -0.006992336362600327, 0, 0, 0, 0, 0, 0, 0, 0, 0.001893223379738629, -0.004657160956412554, 0.002229477744549513, 0, 0, -0.007175271864980459, 0.001289794687181711, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.002403544029220939, 0, -0.002256841864436865, 0, 0, 0, -0.004640729166567326, 0, -0.002035288140177727, 0, 0.001165834022685885, 0, -0.005664237309247255, 0, 0, 0.00399570120498538, 0.002397494856268167, 0.002753510372713208, -0.005040568299591541, 0.002017602790147066, -0.004667480010539293, 0.001861173426732421, -0.004589625634253025, 0.003846945706754923, -0.004963497165590525, 0.002814508276060224, 0.001662703580223024, 0, 0, 0.001189949456602335, 0,
        0, 0, 0, 0, -0.002374701201915741, 0, 0, 0, 0, 0, 0, 0, 0.003392222104594111, -0.004468675237149, 0, 0, 0, 0, 0, 0, -0.003046923317015171, 0, 0, 0, -2.843243601091672e-05, 0, 0, 0, 0.0009812371572479606, -0.01168526895344257, -0.01229306310415268, -0.004605923779308796, 0.001179673010483384, 0, 0, 0, 0.001878225360997021, 0, 0, 0, 0.001080975402146578, 0.001408959040418267, 0, 0, 0.003403076203539968, 0, 0, 0, 0, 0, 0, 0, 0.002737333765253425, 0, 0, 0, 0.003773801028728485, 0.001140869571827352, 0, 0, 0.003393992781639099, 0.002686632098630071, 0, 0
    };
    struct TCatboostCPPExportModelCtrs modelCtrs = {
        .UsedModelCtrsCount = 25,
        .CompressedModelCtrs = {
            {
                .Projection = {
                    .transposedCatFeatureIndexes = {3},
                    .binarizedIndexes = {},
                },
                .ModelCtrs = {
                    {.BaseHash = 768791580653471478ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471478ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0.5, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471478ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 1, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 11154939068695130472ull, .BaseCtrType = ECatboostCPPExportModelCtrType::FeatureFreq, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1}
                }
            },
            {
                .Projection = {
                    .transposedCatFeatureIndexes = {4},
                    .binarizedIndexes = {},
                },
                .ModelCtrs = {
                    {.BaseHash = 768791580653471473ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471473ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0.5, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471473ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 1, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 11154939068695130479ull, .BaseCtrType = ECatboostCPPExportModelCtrType::FeatureFreq, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1}
                }
            },
            {
                .Projection = {
                    .transposedCatFeatureIndexes = {5},
                    .binarizedIndexes = {},
                },
                .ModelCtrs = {
                    {.BaseHash = 768791580653471472ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471472ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0.5, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471472ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 1, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 11154939068695130478ull, .BaseCtrType = ECatboostCPPExportModelCtrType::FeatureFreq, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1}
                }
            },
            {
                .Projection = {
                    .transposedCatFeatureIndexes = {6},
                    .binarizedIndexes = {},
                },
                .ModelCtrs = {
                    {.BaseHash = 768791580653471475ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471475ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0.5, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471475ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 1, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 11154939068695130477ull, .BaseCtrType = ECatboostCPPExportModelCtrType::FeatureFreq, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1}
                }
            },
            {
                .Projection = {
                    .transposedCatFeatureIndexes = {7},
                    .binarizedIndexes = {},
                },
                .ModelCtrs = {
                    {.BaseHash = 768791580653471474ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471474ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0.5, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471474ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 1, .PriorDenom = 1, .Shift = 0, .Scale = 1}
                }
            },
            {
                .Projection = {
                    .transposedCatFeatureIndexes = {8},
                    .binarizedIndexes = {},
                },
                .ModelCtrs = {
                    {.BaseHash = 768791580653471469ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471469ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 1, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 11154939068695130483ull, .BaseCtrType = ECatboostCPPExportModelCtrType::FeatureFreq, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1}
                }
            },
            {
                .Projection = {
                    .transposedCatFeatureIndexes = {10},
                    .binarizedIndexes = {},
                },
                .ModelCtrs = {
                    {.BaseHash = 768791580653471471ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471471ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0.5, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471471ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 1, .PriorDenom = 1, .Shift = 0, .Scale = 1}
                }
            }
        },
        .CtrData = {
            .LearnCtrs = {
                {
                    768791580653471469ull,
                    {
                        .IndexHashViewer = {{18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {8473802870189803490ull, 0}, {7071392469244395075ull, 2}, {18446744073709551615ull, 0}, {8806438445905145973ull, 3}, {619730330622847022ull, 1}, {18446744073709551615ull, 0}},
                        .TargetClassesCount = 2,
                        .CounterDenominator = 0,
                        .CtrMeanHistory = {{.Sum = 2.94273e-44, .Count = 61}, {.Sum = 0, .Count = 12}, {.Sum = 1.4013e-45, .Count = 5}, {.Sum = 0, .Count = 1}},
                        .CtrTotal = {21, 61, 0, 12, 1, 5, 0, 1}
                    }
                },
                {
                    768791580653471471ull,
                    {
                        .IndexHashViewer = {{2136296385601851904ull, 0}, {7428730412605434673ull, 2}, {9959754109938180626ull, 6}, {14256903225472974739ull, 1}, {8056048104805248435ull, 3}, {18446744073709551615ull, 0}, {12130603730978457510ull, 5}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {10789443546307262781ull, 4}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}},
                        .TargetClassesCount = 2,
                        .CounterDenominator = 0,
                        .CtrMeanHistory = {{.Sum = 2.8026e-44, .Count = 73}, {.Sum = 0, .Count = 1}, {.Sum = 0, .Count = 2}, {.Sum = 0, .Count = 2}, {.Sum = 0, .Count = 1}, {.Sum = 1.4013e-45, .Count = 0}, {.Sum = 1.4013e-45, .Count = 0}},
                        .CtrTotal = {20, 73, 0, 1, 0, 2, 0, 2, 0, 1, 1, 0, 1, 0}
                    }
                },
                {
                    768791580653471472ull,
                    {
                        .IndexHashViewer = {{18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {13987540656699198946ull, 3}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18089724839685297862ull, 5}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {10353740403438739754ull, 1}, {3922001124998993866ull, 2}, {13686716744772876732ull, 4}, {18293943161539901837ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}},
                        .TargetClassesCount = 2,
                        .CounterDenominator = 0,
                        .CtrMeanHistory = {{.Sum = 0, .Count = 13}, {.Sum = 3.08286e-44, .Count = 20}, {.Sum = 0, .Count = 37}, {.Sum = 0, .Count = 2}, {.Sum = 0, .Count = 4}, {.Sum = 0, .Count = 3}},
                        .CtrTotal = {0, 13, 22, 20, 0, 37, 0, 2, 0, 4, 0, 3}
                    }
                },
                {
                    768791580653471473ull,
                    {
                        .IndexHashViewer = {{7537614347373541888ull, 4}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {5903587924673389870ull, 2}, {18278593470046426063ull, 6}, {10490918088663114479ull, 3}, {18446744073709551615ull, 0}, {407784798908322194ull, 7}, {5726141494028968211ull, 1}, {1663272627194921140ull, 10}, {8118089682304925684ull, 8}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {15431483020081801594ull, 9}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {1403990565605003389ull, 5}, {3699047549849816830ull, 11}, {14914630290137473119ull, 0}},
                        .TargetClassesCount = 2,
                        .CounterDenominator = 0,
                        .CtrMeanHistory = {{.Sum = 9.80909e-45, .Count = 3}, {.Sum = 1.4013e-45, .Count = 3}, {.Sum = 5.60519e-45, .Count = 24}, {.Sum = 0, .Count = 3}, {.Sum = 5.60519e-45, .Count = 16}, {.Sum = 4.2039e-45, .Count = 16}, {.Sum = 0, .Count = 4}, {.Sum = 0, .Count = 5}, {.Sum = 1.4013e-45, .Count = 1}, {.Sum = 0, .Count = 1}, {.Sum = 0, .Count = 3}, {.Sum = 2.8026e-45, .Count = 0}},
                        .CtrTotal = {7, 3, 1, 3, 4, 24, 0, 3, 4, 16, 3, 16, 0, 4, 0, 5, 1, 1, 0, 1, 0, 3, 2, 0}
                    }
                },
                {
                    768791580653471474ull,
                    {
                        .IndexHashViewer = {{3607388709394294015ull, 5}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18356215166324018775ull, 2}, {18365206492781874408ull, 1}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {14559146096844143499ull, 4}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {11416626865500250542ull, 3}, {5549384008678792175ull, 0}},
                        .TargetClassesCount = 2,
                        .CounterDenominator = 0,
                        .CtrMeanHistory = {{.Sum = 0, .Count = 22}, {.Sum = 2.8026e-45, .Count = 3}, {.Sum = 0, .Count = 14}, {.Sum = 2.66247e-44, .Count = 17}, {.Sum = 0, .Count = 22}, {.Sum = 1.4013e-45, .Count = 1}},
                        .CtrTotal = {0, 22, 2, 3, 0, 14, 19, 17, 0, 22, 1, 1}
                    }
                },
                {
                    768791580653471475ull,
                    {
                        .IndexHashViewer = {{18446744073709551615ull, 0}, {14452488454682494753ull, 5}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {1388452262538353895ull, 9}, {8940247467966214344ull, 1}, {4415016594903340137ull, 4}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {41084306841859596ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {8678739366408346384ull, 2}, {18446744073709551615ull, 0}, {4544226147037566482ull, 11}, {14256903225472974739ull, 8}, {16748601451484174196ull, 7}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {5913522704362245435ull, 6}, {1466902651052050075ull, 10}, {2942073219785550491ull, 12}, {15383677753867481021ull, 3}, {18446744073709551615ull, 0}},
                        .TargetClassesCount = 2,
                        .CounterDenominator = 0,
                        .CtrMeanHistory = {{.Sum = 8.40779e-45, .Count = 10}, {.Sum = 2.8026e-45, .Count = 8}, {.Sum = 0, .Count = 6}, {.Sum = 2.8026e-45, .Count = 14}, {.Sum = 1.4013e-45, .Count = 4}, {.Sum = 2.8026e-45, .Count = 9}, {.Sum = 0, .Count = 11}, {.Sum = 0, .Count = 3}, {.Sum = 1.4013e-45, .Count = 5}, {.Sum = 9.80909e-45, .Count = 6}, {.Sum = 0, .Count = 2}, {.Sum = 1.4013e-45, .Count = 0}, {.Sum = 0, .Count = 1}},
                        .CtrTotal = {6, 10, 2, 8, 0, 6, 2, 14, 1, 4, 2, 9, 0, 11, 0, 3, 1, 5, 7, 6, 0, 2, 1, 0, 0, 1}
                    }
                },
                {
                    768791580653471478ull,
                    {
                        .IndexHashViewer = {{18446744073709551615ull, 0}, {15379737126276794113ull, 5}, {18446744073709551615ull, 0}, {14256903225472974739ull, 3}, {18048946643763804916ull, 1}, {2051959227349154549ull, 4}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {7024059537692152076ull, 6}, {18446744073709551615ull, 0}, {15472181234288693070ull, 2}, {8864790892067322495ull, 0}},
                        .TargetClassesCount = 2,
                        .CounterDenominator = 0,
                        .CtrMeanHistory = {{.Sum = 1.4013e-44, .Count = 58}, {.Sum = 0, .Count = 4}, {.Sum = 1.4013e-45, .Count = 6}, {.Sum = 1.4013e-45, .Count = 5}, {.Sum = 4.2039e-45, .Count = 6}, {.Sum = 2.8026e-45, .Count = 0}, {.Sum = 7.00649e-45, .Count = 0}},
                        .CtrTotal = {10, 58, 0, 4, 1, 6, 1, 5, 3, 6, 2, 0, 5, 0}
                    }
                },
                {
                    11154939068695130472ull,
                    {
                        .IndexHashViewer = {{18446744073709551615ull, 0}, {15379737126276794113ull, 5}, {18446744073709551615ull, 0}, {14256903225472974739ull, 3}, {18048946643763804916ull, 1}, {2051959227349154549ull, 4}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {7024059537692152076ull, 6}, {18446744073709551615ull, 0}, {15472181234288693070ull, 2}, {8864790892067322495ull, 0}},
                        .TargetClassesCount = 0,
                        .CounterDenominator = 101,
                        .CtrMeanHistory = {{.Sum = 9.52883e-44, .Count = 4}, {.Sum = 9.80909e-45, .Count = 6}, {.Sum = 1.26117e-44, .Count = 2}},
                        .CtrTotal = {68, 4, 7, 6, 9, 2, 5}
                    }
                },
                {
                    11154939068695130477ull,
                    {
                        .IndexHashViewer = {{18446744073709551615ull, 0}, {14452488454682494753ull, 5}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {1388452262538353895ull, 9}, {8940247467966214344ull, 1}, {4415016594903340137ull, 4}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {41084306841859596ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {8678739366408346384ull, 2}, {18446744073709551615ull, 0}, {4544226147037566482ull, 11}, {14256903225472974739ull, 8}, {16748601451484174196ull, 7}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {5913522704362245435ull, 6}, {1466902651052050075ull, 10}, {2942073219785550491ull, 12}, {15383677753867481021ull, 3}, {18446744073709551615ull, 0}},
                        .TargetClassesCount = 0,
                        .CounterDenominator = 101,
                        .CtrMeanHistory = {{.Sum = 2.24208e-44, .Count = 10}, {.Sum = 8.40779e-45, .Count = 16}, {.Sum = 7.00649e-45, .Count = 11}, {.Sum = 1.54143e-44, .Count = 3}, {.Sum = 8.40779e-45, .Count = 13}, {.Sum = 2.8026e-45, .Count = 1}},
                        .CtrTotal = {16, 10, 6, 16, 5, 11, 11, 3, 6, 13, 2, 1, 1}
                    }
                },
                {
                    11154939068695130478ull,
                    {
                        .IndexHashViewer = {{18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {13987540656699198946ull, 3}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18089724839685297862ull, 5}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {10353740403438739754ull, 1}, {3922001124998993866ull, 2}, {13686716744772876732ull, 4}, {18293943161539901837ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}},
                        .TargetClassesCount = 0,
                        .CounterDenominator = 101,
                        .CtrMeanHistory = {{.Sum = 1.82169e-44, .Count = 42}, {.Sum = 5.1848e-44, .Count = 2}, {.Sum = 5.60519e-45, .Count = 3}},
                        .CtrTotal = {13, 42, 37, 2, 4, 3}
                    }
                },
                {
                    11154939068695130479ull,
                    {
                        .IndexHashViewer = {{7537614347373541888ull, 4}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {5903587924673389870ull, 2}, {18278593470046426063ull, 6}, {10490918088663114479ull, 3}, {18446744073709551615ull, 0}, {407784798908322194ull, 7}, {5726141494028968211ull, 1}, {1663272627194921140ull, 10}, {8118089682304925684ull, 8}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {15431483020081801594ull, 9}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {1403990565605003389ull, 5}, {3699047549849816830ull, 11}, {14914630290137473119ull, 0}},
                        .TargetClassesCount = 0,
                        .CounterDenominator = 101,
                        .CtrMeanHistory = {{.Sum = 1.4013e-44, .Count = 4}, {.Sum = 3.92364e-44, .Count = 3}, {.Sum = 2.8026e-44, .Count = 19}, {.Sum = 5.60519e-45, .Count = 5}, {.Sum = 2.8026e-45, .Count = 1}, {.Sum = 4.2039e-45, .Count = 2}},
                        .CtrTotal = {10, 4, 28, 3, 20, 19, 4, 5, 2, 1, 3, 2}
                    }
                },
                {
                    11154939068695130483ull,
                    {
                        .IndexHashViewer = {{18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {8473802870189803490ull, 0}, {7071392469244395075ull, 2}, {18446744073709551615ull, 0}, {8806438445905145973ull, 3}, {619730330622847022ull, 1}, {18446744073709551615ull, 0}},
                        .TargetClassesCount = 0,
                        .CounterDenominator = 101,
                        .CtrMeanHistory = {{.Sum = 1.14906e-43, .Count = 12}, {.Sum = 8.40779e-45, .Count = 1}},
                        .CtrTotal = {82, 12, 6, 1}
                    }
                }
            }
        }
    };
} CatboostModelStatic;

static std::unordered_map<std::string, int> CatFeatureHashes = {
};

static inline TCatboostCPPExportModelCtrBaseHash CalcHash(TCatboostCPPExportModelCtrBaseHash a, TCatboostCPPExportModelCtrBaseHash b) {
    const static constexpr TCatboostCPPExportModelCtrBaseHash MAGIC_MULT = 0x4906ba494954cb65ull;
    return MAGIC_MULT * (a + MAGIC_MULT * b);
}

static inline TCatboostCPPExportModelCtrBaseHash CalcHash(
    const std::vector<unsigned char>& binarizedFeatures,
    const std::vector<int>& hashedCatFeatures,
    const std::vector<int>& transposedCatFeatureIndexes,
    const std::vector<TCatboostCPPExportBinFeatureIndexValue>& binarizedFeatureIndexes) {
    TCatboostCPPExportModelCtrBaseHash result = 0;
    for (const int featureIdx : transposedCatFeatureIndexes) {
        auto valPtr = &hashedCatFeatures[featureIdx];
        result = CalcHash(result, (TCatboostCPPExportModelCtrBaseHash)valPtr[0]);
    }
    for (const auto& binFeatureIndex : binarizedFeatureIndexes) {
        const unsigned char* binFPtr = &binarizedFeatures[binFeatureIndex.BinIndex];
        if (!binFeatureIndex.CheckValueEqual) {
            result = CalcHash(result, (TCatboostCPPExportModelCtrBaseHash)(binFPtr[0] >= binFeatureIndex.Value));
        } else {
            result = CalcHash(result, (TCatboostCPPExportModelCtrBaseHash)(binFPtr[0] == binFeatureIndex.Value));
        }
    }
    return result;
}

static void CalcCtrs(const TCatboostCPPExportModelCtrs& modelCtrs,
                     const std::vector<unsigned char>& binarizedFeatures,
                     const std::vector<int>& hashedCatFeatures,
                     std::vector<float>& result) {
    TCatboostCPPExportModelCtrBaseHash ctrHash;
    size_t resultIdx = 0;

    for (size_t i = 0; i < modelCtrs.CompressedModelCtrs.size(); ++i) {
        auto& proj = modelCtrs.CompressedModelCtrs[i].Projection;
        ctrHash = CalcHash(binarizedFeatures, hashedCatFeatures,
                           proj.transposedCatFeatureIndexes, proj.binarizedIndexes);
        for (size_t j = 0; j < modelCtrs.CompressedModelCtrs[i].ModelCtrs.size(); ++j) {
            auto& ctr = modelCtrs.CompressedModelCtrs[i].ModelCtrs[j];
            auto& learnCtr = modelCtrs.CtrData.LearnCtrs.at(ctr.BaseHash);
            const ECatboostCPPExportModelCtrType ctrType = ctr.BaseCtrType;
            const unsigned int* bucketPtr = learnCtr.ResolveHashIndex(ctrHash);
            if (bucketPtr == NULL) {
                result[resultIdx] = ctr.Calc(0.f, 0.f);
            } else {
                unsigned int bucket = *bucketPtr;
                if (ctrType == ECatboostCPPExportModelCtrType::BinarizedTargetMeanValue || ctrType == ECatboostCPPExportModelCtrType::FloatTargetMeanValue) {
                    const TCatboostCPPExportCtrMeanHistory& ctrMeanHistory = learnCtr.CtrMeanHistory[bucket];
                    result[resultIdx] = ctr.Calc(ctrMeanHistory.Sum, ctrMeanHistory.Count);
                } else if (ctrType == ECatboostCPPExportModelCtrType::Counter || ctrType == ECatboostCPPExportModelCtrType::FeatureFreq) {
                    const std::vector<int>& ctrTotal = learnCtr.CtrTotal;
                    const int denominator = learnCtr.CounterDenominator;
                    result[resultIdx] = ctr.Calc(ctrTotal[bucket], denominator);
                } else if (ctrType == ECatboostCPPExportModelCtrType::Buckets) {
                    auto ctrIntArray = learnCtr.CtrTotal;
                    const int targetClassesCount = learnCtr.TargetClassesCount;
                    int goodCount = 0;
                    int totalCount = 0;
                    int* ctrHistory = ctrIntArray.data() + bucket * targetClassesCount;
                    goodCount = ctrHistory[ctr.TargetBorderIdx];
                    for (int classId = 0; classId < targetClassesCount; ++classId) {
                        totalCount += ctrHistory[classId];
                    }
                    result[resultIdx] = ctr.Calc(goodCount, totalCount);
                } else {
                    auto ctrIntArray = learnCtr.CtrTotal;
                    const int targetClassesCount = learnCtr.TargetClassesCount;

                    if (targetClassesCount > 2) {
                        int goodCount = 0;
                        int totalCount = 0;
                        int* ctrHistory = ctrIntArray.data() + bucket * targetClassesCount;
                        for (int classId = 0; classId < ctr.TargetBorderIdx + 1; ++classId) {
                            totalCount += ctrHistory[classId];
                        }
                        for (int classId = ctr.TargetBorderIdx + 1; classId < targetClassesCount; ++classId) {
                            goodCount += ctrHistory[classId];
                        }
                        totalCount += goodCount;
                        result[resultIdx] = ctr.Calc(goodCount, totalCount);
                    } else {
                        const int* ctrHistory = &ctrIntArray[bucket * 2];
                        result[resultIdx] = ctr.Calc(ctrHistory[1], ctrHistory[0] + ctrHistory[1]);
                    }
                }
            }
            resultIdx += 1;
        }
    }
}

static int GetHash(const std::string& catFeature, const std::unordered_map<std::string, int>& catFeatureHashes) {
    const auto keyValue = catFeatureHashes.find(catFeature);
    if (keyValue != catFeatureHashes.end()) {
        return keyValue->second;
    } else {
        return 0x7fFFffFF;
    }
}

/* Model applicator */
double ApplyCatboostModel(
    const std::vector<float>& floatFeatures,
    const std::vector<std::string>& catFeatures) {
    const struct CatboostModel& model = CatboostModelStatic;

    assert(floatFeatures.size() == model.FloatFeatureCount);
    assert(catFeatures.size() == model.CatFeatureCount);

    /* Binarize features */
    std::vector<unsigned char> binaryFeatures(model.BinaryFeatureCount, 0);
    unsigned int binFeatureIndex = 0;
    {
        /* Binarize float features */
        for (size_t i = 0; i < model.FloatFeatureBorders.size(); ++i) {
            for (const float border : model.FloatFeatureBorders[i]) {
                binaryFeatures[binFeatureIndex] += (unsigned char)(floatFeatures[i] > border);
            }
            ++binFeatureIndex;
        }
    }

    std::vector<int> transposedHash(model.CatFeatureCount);
    for (size_t i = 0; i < model.CatFeatureCount; ++i) {
        transposedHash[i] = GetHash(catFeatures[i], CatFeatureHashes);
    }

    if (model.OneHotCatFeatureIndex.size() > 0) {
        /* Binarize one hot cat features */
        std::unordered_map<int, int> catFeaturePackedIndexes;
        for (unsigned int i = 0; i < model.CatFeatureCount; ++i) {
            catFeaturePackedIndexes[model.CatFeaturesIndex[i]] = i;
        };
        for (unsigned int i = 0; i < model.OneHotCatFeatureIndex.size(); ++i) {
            const auto catIdx = catFeaturePackedIndexes.at(model.OneHotCatFeatureIndex[i]);
            const auto hash = transposedHash[catIdx];
            for (unsigned int borderIdx = 0; borderIdx < model.OneHotHashValues[i].size(); ++borderIdx) {
                binaryFeatures[binFeatureIndex] |= (unsigned char)(hash == model.OneHotHashValues[i][borderIdx]) * (borderIdx + 1);
            }
            ++binFeatureIndex;
        }
    }

    if (model.modelCtrs.UsedModelCtrsCount > 0) {
        /* Binarize CTR cat features */
        std::vector<float> ctrs(model.modelCtrs.UsedModelCtrsCount);
        CalcCtrs(model.modelCtrs, binaryFeatures, transposedHash, ctrs);

        for (size_t i = 0; i < model.CtrFeatureBorders.size(); ++i) {
            for (const float border : model.CtrFeatureBorders[i]) {
                binaryFeatures[binFeatureIndex] += (unsigned char)(ctrs[i] > border);
            }
            ++binFeatureIndex;
        }
    }

    /* Extract and sum values from trees */
    double result = 0.0;
    const unsigned int* treeSplitsPtr = model.TreeSplits.data();
    const double* leafValuesPtr = model.LeafValues;
    size_t treePtr = 0;
    for (unsigned int treeId = 0; treeId < model.TreeCount; ++treeId) {
        const unsigned int currentTreeDepth = model.TreeDepth[treeId];
        unsigned int index = 0;
        for (unsigned int depth = 0; depth < currentTreeDepth; ++depth) {
            const unsigned char borderVal = model.TreeSplitIdxs[treePtr + depth];
            const unsigned int featureIndex = model.TreeSplitFeatureIndex[treePtr + depth];
            const unsigned char xorMask = model.TreeSplitXorMask[treePtr + depth];
            index |= ((binaryFeatures[featureIndex] ^ xorMask) >= borderVal) << depth;
        }
        result += leafValuesPtr[index];
        treeSplitsPtr += currentTreeDepth;
        leafValuesPtr += (1 << currentTreeDepth);
        treePtr += currentTreeDepth;
    }
    return result;
}
