#include <string>
#include <vector>

/* Model data */
static const struct CatboostModel {
    unsigned int FloatFeatureCount = 50;
    unsigned int BinaryFeatureCount = 12;
    unsigned int TreeCount = 2;
    unsigned int TreeDepth[2] = {6, 6};
    unsigned int TreeSplits[12] = {9, 7, 3, 4, 2, 10, 11, 0, 1, 6, 5, 8};
    unsigned int BorderCounts[50] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0};
    float Borders[12] = {0.215384498f, 0.630002975f, 0.795647502f, 0.492156982f, 0.0416666493f, 0.5f, 0.02983425f, 0.00181464502f, 0.0072560953f, 0.753007531f, 0.211401001f, 0.640262485f, };

    /* Aggregated array of leaf values for trees. Each tree is represented by a separate line: */
    double LeafValues[128] = {
        0.05962679535150528, 0.06050201132893562, 0.06036009639501572, 0.06050201132893562, 0.05908763408660889, 0.06109824776649475, 0.05978238210082054, 0.06050201132893562, 0.05994560569524765, 0.06050201132893562, 0.06312324851751328, 0.06050201132893562, 0.06061598658561707, 0.06050201132893562, 0.06004824489355087, 0.06050201132893562, 0.06050201132893562, 0.06050201132893562, 0.06004824489355087, 0.06050201132893562, 0.06050201132893562, 0.06050201132893562, 0.06050201132893562, 0.06050201132893562, 0.06050201132893562, 0.06050201132893562, 0.06050201132893562, 0.06050201132893562, 0.06050201132893562, 0.06050201132893562, 0.06050201132893562, 0.06050201132893562, 0.05999837815761566, 0.0631360337138176, 0.06081169843673706, 0.06264828145503998, 0.05992952734231949, 0.06004824489355087, 0.05985980108380318, 0.06174017861485481, 0.05968666821718216, 0.06089071556925774, 0.06125888228416443, 0.06261461973190308, 0.05959448218345642, 0.06109824776649475, 0.06071483716368675, 0.06186483427882195, 0.06050201132893562, 0.06050201132893562, 0.065501369535923, 0.06050201132893562, 0.06050201132893562, 0.06050201132893562, 0.06113626062870026, 0.06050201132893562, 0.06050201132893562, 0.06050201132893562, 0.05991598591208458, 0.06050201132893562, 0.06050201132893562, 0.06050201132893562, 0.06045198068022728, 0.06050201132893562,
        -0.0004489484999794513, 0, -0.0008267186349257827, -0.0004494714376050979, 0, 0, 0.004414282273501158, -0.0004493698943406343, -0.000456087727798149, 0, -0.000785626529250294, 0.0002510512131266296, 0, 0, 0, 0, -0.0009024837054312229, -0.0004476500034797937, -0.0003274795599281788, 0.0009805334266275167, 0, 0, 0.003764267079532146, -0.0004489484999794513, 0.000147815648233518, 0.003849697066470981, -0.0003933792468160391, 0.001169789349660277, 0, 0, 0, 0, -0.000456087727798149, 0, 0.0001724530884530395, 0.001614656648598611, 0, 0, -0.0001406052906531841, 0.0006504327175207436, 0, 0, 0.000112106507003773, 0.0002320445637451485, 0, 0, 0.002150259679183364, 0.0009266755660064518, 0, 0, 0.0002637545403558761, 0.004137720447033644, 0, 0, 0, 7.605149585288018e-05, -0.000456087727798149, 0.004558220505714417, 0.0007700700662098825, 0.001277962350286543, 0, 0, 0, -0.0003066200588364154
    };
} CatboostModelStatic;

/* Model applicator */
double ApplyCatboostModel(
    const std::vector<float>& features
) {
    const struct CatboostModel& model = CatboostModelStatic;

    /* Binarise features */
    std::vector<unsigned char> binaryFeatures(model.BinaryFeatureCount);
    unsigned int binFeatureIndex = 0;
    for (unsigned int i = 0; i < model.FloatFeatureCount; ++i) {
        for(unsigned int j = 0; j < model.BorderCounts[i]; ++j) {
            binaryFeatures[binFeatureIndex] = (unsigned char)(features[i] > model.Borders[binFeatureIndex]);
            ++binFeatureIndex;
        }
    }

    /* Extract and sum values from trees */
    double result = 0.0;
    const unsigned int* treeSplitsPtr = model.TreeSplits;
    const double* leafValuesForCurrentTreePtr = model.LeafValues;
    for (unsigned int treeId = 0; treeId < model.TreeCount; ++treeId) {
        const unsigned int currentTreeDepth = model.TreeDepth[treeId];
        unsigned int index = 0;
        for (unsigned int depth = 0; depth < currentTreeDepth; ++depth) {
            index |= (binaryFeatures[treeSplitsPtr[depth]] << depth);
        }
        result += leafValuesForCurrentTreePtr[index];
        treeSplitsPtr += currentTreeDepth;
        leafValuesForCurrentTreePtr += (1 << currentTreeDepth);
    }
    return result;
}

double ApplyCatboostModel(
    const std::vector<float>& floatFeatures,
    const std::vector<std::string>&
) {
    return ApplyCatboostModel(floatFeatures);
}
