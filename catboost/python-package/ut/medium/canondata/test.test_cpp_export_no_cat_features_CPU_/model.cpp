#include <string>
#include <vector>

/* Model data */
static const struct CatboostModel {
    unsigned int FloatFeatureCount = 50;
    unsigned int BinaryFeatureCount = 12;
    unsigned int TreeCount = 2;
    unsigned int TreeDepth[2] = {6, 6};
    unsigned int TreeSplits[12] = {7, 6, 3, 4, 9, 2, 11, 0, 5, 10, 1, 8};
    unsigned int BorderCounts[50] = {0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0};
    float Borders[12] = {0.161994487f, 0.5f, 0.645990014f, 0.102054507f, 0.272549003f, 0.552941501f, 0.5f, 0.0950040966f, 0.726830006f, 0.163893014f, 0.387494028f, 0.767975509f, };

    /* Aggregated array of leaf values for trees. Each tree is represented by a separate line: */
    double LeafValues[128] = {
        0.05946996308189739, 0.06050201132893562, 0.0597759872092163, 0.06036483399876603, 0.06050201132893562, 0.06050201132893562, 0.06050201132893562, 0.06050201132893562, 0.06036571608229641, 0.06050201132893562, 0.06029448116662048, 0.06514952970658254, 0.06050201132893562, 0.06050201132893562, 0.06050201132893562, 0.06050201132893562, 0.06050201132893562, 0.06050201132893562, 0.06009674506236463, 0.06089071607279693, 0.06050201132893562, 0.06050201132893562, 0.0605746798716745, 0.06193475821392059, 0.06050201132893562, 0.06050201132893562, 0.0594607193831092, 0.06165612771390118, 0.06050201132893562, 0.06050201132893562, 0.06022814215791031, 0.06268669740952665, 0.05906421007263216, 0.06050201132893562, 0.06035650779951425, 0.06185469469926672, 0.06050201132893562, 0.06050201132893562, 0.05975863778762609, 0.06050201132893562, 0.05975038477755461, 0.06050201132893562, 0.05969502605322529, 0.06110725575033905, 0.06050201132893562, 0.06050201132893562, 0.05946483401505088, 0.06050201132893562, 0.06050201132893562, 0.06050201132893562, 0.0601506083272138, 0.06178352478588342, 0.06050201132893562, 0.06050201132893562, 0.06104073085673532, 0.06222657144513391, 0.06050201132893562, 0.06050201132893562, 0.05978753017388105, 0.06192195767467341, 0.06050201132893562, 0.06050201132893562, 0.06095108994090935, 0.06237451352671954,
        -0.0007230111882521906, 0, 0.0009948666723278347, 0, -0.0007900164519951704, 0, -0.0002659289693480023, 0, 0.0001254563983881354, 0.001428628754144297, 0.001078632236203841, 0.0009796141431045787, -0.0008358364702347598, 0.00160007905108467, 0.000592866816661922, 0, -0.0005340867153276784, 0, 0.0003537692229000622, 0, -0.0007821319066561396, 0, -0.0003675843939963945, 0, 0.001604622291796156, 0.001675244171601597, 0.0008848058784688241, 0.004456863924052284, -0.001148912729734933, 0, -0.0005602905556206702, 0, -0.0005737073891526625, 0, -0.001100966225028356, 0, -0.0001166522483816535, 0, -0.00106129749074719, 0, 0.0001540051217899349, 0.005564426303322108, -0.001032946050067701, 0, 0.0001473638233077871, 0.0003772364785429609, -0.0009327486391357833, 0, -0.0005709572214822599, 0, -0.0002979036512760183, 0, -0.001296188877843233, 0, -0.000560651596176989, 0, -0.0002341298353139103, 0.001675639834827854, 0.0006904073493944664, 0.001700468864075095, -0.0004692910482660644, 0.001468376451942307, 0.0001621911364306871, 0
    };
} CatboostModelStatic;

/* Model applicator */
double ApplyCatboostModel(
    const std::vector<float>& features
) {
    const struct CatboostModel& model = CatboostModelStatic;

    /* Binarise features */
    std::vector<unsigned char> binaryFeatures(model.BinaryFeatureCount);
    unsigned int binFeatureIndex = 0;
    for (unsigned int i = 0; i < model.FloatFeatureCount; ++i) {
        for(unsigned int j = 0; j < model.BorderCounts[i]; ++j) {
            binaryFeatures[binFeatureIndex] = (unsigned char)(features[i] > model.Borders[binFeatureIndex]);
            ++binFeatureIndex;
        }
    }

    /* Extract and sum values from trees */
    double result = 0.0;
    const unsigned int* treeSplitsPtr = model.TreeSplits;
    const double* leafValuesForCurrentTreePtr = model.LeafValues;
    for (unsigned int treeId = 0; treeId < model.TreeCount; ++treeId) {
        const unsigned int currentTreeDepth = model.TreeDepth[treeId];
        unsigned int index = 0;
        for (unsigned int depth = 0; depth < currentTreeDepth; ++depth) {
            index |= (binaryFeatures[treeSplitsPtr[depth]] << depth);
        }
        result += leafValuesForCurrentTreePtr[index];
        treeSplitsPtr += currentTreeDepth;
        leafValuesForCurrentTreePtr += (1 << currentTreeDepth);
    }
    return result;
}

double ApplyCatboostModel(
    const std::vector<float>& floatFeatures,
    const std::vector<std::string>&
) {
    return ApplyCatboostModel(floatFeatures);
}
