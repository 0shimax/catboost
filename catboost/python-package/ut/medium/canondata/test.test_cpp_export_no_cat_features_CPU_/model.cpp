#include <string>
#include <vector>

/* Model data */
static const struct CatboostModel {
    unsigned int FloatFeatureCount = 50;
    unsigned int BinaryFeatureCount = 12;
    unsigned int TreeCount = 2;
    unsigned int TreeDepth[2] = {6, 6};
    unsigned int TreeSplits[12] = {4, 0, 11, 1, 9, 8, 5, 10, 3, 7, 2, 6};
    unsigned int BorderCounts[50] = {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    float Borders[12] = {0.156479999f, 0.748417497f, 0.0504557006f, 0.398038983f, 0.0867389515f, 0.5f, 0.185759991f, 0.318073004f, 0.423586994f, 0.00513814017f, 0.00177894998f, 0.005463365f, };

    /* Aggregated array of leaf values for trees. Each tree is represented by a separate line: */
    double LeafValues[128] = {
        -0.0008994469494163445, 0.0001994577638926111, -0.0003428224381712579, -0.0009075301496491543, -0.0005298907126138197, 0.0001262047299845949, 6.940736872876014e-06, 0.002378848775203925, -0.0009500592257940558, 0.0004924698250188715, 0.001792369373719672, 0, 0.001420146873143012, 0.001403088524309802, 0.001262626908664457, 0.001122822640645423, -0.0004425452410978395, 0.0001207830543641063, -0.0004537650748245772, 0.0001424698313518651, 0.0005339758574818998, 0.002201376827456148, 0.002175804793630432, 0.00122756725360356, -0.001112152385605611, 0.0008207830416981192, 0.000842469818685878, 0.0005962349061764422, 0.001192469812352884, 0.001575501898478673, 0.0009655872749405959, 0.002032656312190227, -0.0006159876205178879, -8.441270606042352e-05, -0.0008078012677028487, 0, -0.0004084337642998009, -0.0007371773193130279, 0.0004448660903403154, 0.0009512047443269617, -0.0002542481494100852, 0.0004628226589738513, 0.002533075901871712, 0, 0.000375502252215676, 0.00225662638666819, 0.0002175353744804402, 0.0004924698250188715, -0.0006094126965609332, 0.004364696033529279, 0, 0, 0, 0.001713166861154666, 0, 0.003542469828371631, -0.0009237952323899734, -0.0004537650748245772, 0, 0, 0, 0.001907951699764615, 7.123491567593253e-05, -0.0003060241273189157,
        -0.0009068310388559039, 0.0005823790048818268, 0.0003022397759053274, 0.001236387425717793, -0.001110814547534013, 0, -0.0009955282825560336, 0.0005900790335013008, -0.0007270945767319858, -0.0004503618368394611, -0.0004830951003004704, 0, -0.0007312046291846942, 0, -0.0003228709852496245, 0.001331784484289174, -0.0009001571778393699, 0.0008336580731940341, 0.0001846719011632318, 0.001297891181080824, -0.0009618816738515486, 0, -8.710280354874731e-05, 0.000935069827523146, -0.000469122101802195, 0.000927062975956497, 0.0009596543982336384, 0.0001628772571593989, -0.0005596775005835593, 6.159951384984342e-05, -0.0003414199319814777, 0.002115943356260227, 0, -0.001142222399221946, 0, 0.001164318208439542, -0.000457458598429662, 0.0005900790335013008, 0, 9.584290627186962e-05, 0.001870434369045688, 0.0005927637363117251, 0.0005925413825713574, 0.0005833861550049742, 0.0002303670248576997, 0.005328653757534604, -0.000235488818658018, 0, 0, -0.0003494213597650448, -0.0003075385840448801, 0.001911465205838799, 0, 0, 0.0003968806892349656, 0.001932862827397617, -7.592085855706009e-05, 0, 0.001140556113073425, 0.002650395860214851, 0.0002143034913390684, 0, -0.0003199517355933474, 0.002342043877120708
    };
    double Scale = 1;
    double Bias = 0.06050201133;
} CatboostModelStatic;

/* Model applicator */
double ApplyCatboostModel(
    const std::vector<float>& features
) {
    const struct CatboostModel& model = CatboostModelStatic;

    /* Binarise features */
    std::vector<unsigned char> binaryFeatures(model.BinaryFeatureCount);
    unsigned int binFeatureIndex = 0;
    for (unsigned int i = 0; i < model.FloatFeatureCount; ++i) {
        for(unsigned int j = 0; j < model.BorderCounts[i]; ++j) {
            binaryFeatures[binFeatureIndex] = (unsigned char)(features[i] > model.Borders[binFeatureIndex]);
            ++binFeatureIndex;
        }
    }

    /* Extract and sum values from trees */
    double result = 0.0;
    const unsigned int* treeSplitsPtr = model.TreeSplits;
    const double* leafValuesForCurrentTreePtr = model.LeafValues;
    for (unsigned int treeId = 0; treeId < model.TreeCount; ++treeId) {
        const unsigned int currentTreeDepth = model.TreeDepth[treeId];
        unsigned int index = 0;
        for (unsigned int depth = 0; depth < currentTreeDepth; ++depth) {
            index |= (binaryFeatures[treeSplitsPtr[depth]] << depth);
        }
        result += leafValuesForCurrentTreePtr[index];
        treeSplitsPtr += currentTreeDepth;
        leafValuesForCurrentTreePtr += (1 << currentTreeDepth);
    }
    return model.Scale * result + model.Bias;
}

double ApplyCatboostModel(
    const std::vector<float>& floatFeatures,
    const std::vector<std::string>&
) {
    return ApplyCatboostModel(floatFeatures);
}
