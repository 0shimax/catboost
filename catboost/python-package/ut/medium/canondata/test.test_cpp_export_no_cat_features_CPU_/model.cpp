#include <string>
#include <vector>

/* Model data */
static const struct CatboostModel {
    unsigned int FloatFeatureCount = 50;
    unsigned int BinaryFeatureCount = 12;
    unsigned int TreeCount = 2;
    unsigned int TreeDepth[2] = {6, 6};
    unsigned int TreeSplits[12] = {8, 7, 4, 5, 9, 2, 11, 0, 6, 10, 3, 1};
    unsigned int BorderCounts[50] = {0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0};
    float Borders[12] = {0.129020989f, 0.5f, 0.645990014f, 0.731531501f, 0.343203485f, 0.272549003f, 0.552941501f, 0.5f, 0.0950040966f, 0.163893014f, 0.387494028f, 0.767975509f, };

    /* Aggregated array of leaf values for trees. Each tree is represented by a separate line: */
    double LeafValues[128] = {
        0.05946996308189739, 0.06050201132893562, 0.0597759872092163, 0.06036483399876603, 0.06050201132893562, 0.06050201132893562, 0.06050201132893562, 0.06050201132893562, 0.06036571608229641, 0.06050201132893562, 0.06029448116662048, 0.06514952970658254, 0.06050201132893562, 0.06050201132893562, 0.06050201132893562, 0.06050201132893562, 0.06050201132893562, 0.06050201132893562, 0.06030929969270755, 0.06201176563055445, 0.06050201132893562, 0.06050201132893562, 0.06088885377099409, 0.06061378562065109, 0.06050201132893562, 0.06050201132893562, 0.05979592551074399, 0.06231710802093271, 0.06050201132893562, 0.06050201132893562, 0.06086379020534394, 0.06109824623511206, 0.05906421007263216, 0.06050201132893562, 0.06028851134172113, 0.06185469469926672, 0.06050201132893562, 0.06050201132893562, 0.06004824625411104, 0.06050201132893562, 0.05975038477755461, 0.06050201132893562, 0.05967445309356023, 0.06110725575033905, 0.06050201132893562, 0.06050201132893562, 0.0597759872092163, 0.06050201132893562, 0.06050201132893562, 0.06050201132893562, 0.0603308022264912, 0.06226450817009362, 0.06050201132893562, 0.06050201132893562, 0.06221092270785485, 0.06111759986749466, 0.06050201132893562, 0.06050201132893562, 0.06021148334668756, 0.06233052541273109, 0.06050201132893562, 0.06050201132893562, 0.06189712228382211, 0.06102483398043761,
        -0.000917027050763652, 0, -0.0001023161632857904, 0, -0.0006749786591149164, 0, -0.0007672342630328493, 0, 0.0001663165483582841, 0.003226331038366911, 0.0002329458906825826, 0.001478344266430803, -0.0007717087483218283, 0.001182194915445247, 5.012452717852837e-05, 0, -0.0008628047136134319, 0, 0.001732900826582379, 0, -0.0006706854733602141, 0, 3.435305076754058e-05, 0, 0.0005609281733780663, 0.0007760228657202333, 0.001473320309238871, 0.0004394853178986445, 2.199843094468903e-05, 0.0005916955731173785, -0.0006557269432687956, 0, 7.976131087115272e-05, 0, 0.0002605133215158231, 0, -0.001032667716450859, 0, -0.0004968056518123862, 0, -0.0004714617299453535, 0.001760351586397863, 0.001073909387324209, 0.002123790209328512, -0.001448511372609406, 0, -0.0007268539533859603, 0.0005825210508545048, -0.0003529758214693614, 0, 0.001056730442594447, 0, -0.0009167520939934676, 0, -0.001098800568124502, 0, 0.001872449541173461, 0.001656261283980514, 0.0006601236074602712, 0.002449939671961454, -0.0003088540056609102, 0.001341961855967867, 0.0002397258267875516, 0
    };
} CatboostModelStatic;

/* Model applicator */
double ApplyCatboostModel(
    const std::vector<float>& features
) {
    const struct CatboostModel& model = CatboostModelStatic;

    /* Binarise features */
    std::vector<unsigned char> binaryFeatures(model.BinaryFeatureCount);
    unsigned int binFeatureIndex = 0;
    for (unsigned int i = 0; i < model.FloatFeatureCount; ++i) {
        for(unsigned int j = 0; j < model.BorderCounts[i]; ++j) {
            binaryFeatures[binFeatureIndex] = (unsigned char)(features[i] > model.Borders[binFeatureIndex]);
            ++binFeatureIndex;
        }
    }

    /* Extract and sum values from trees */
    double result = 0.0;
    const unsigned int* treeSplitsPtr = model.TreeSplits;
    const double* leafValuesForCurrentTreePtr = model.LeafValues;
    for (unsigned int treeId = 0; treeId < model.TreeCount; ++treeId) {
        const unsigned int currentTreeDepth = model.TreeDepth[treeId];
        unsigned int index = 0;
        for (unsigned int depth = 0; depth < currentTreeDepth; ++depth) {
            index |= (binaryFeatures[treeSplitsPtr[depth]] << depth);
        }
        result += leafValuesForCurrentTreePtr[index];
        treeSplitsPtr += currentTreeDepth;
        leafValuesForCurrentTreePtr += (1 << currentTreeDepth);
    }
    return result;
}

double ApplyCatboostModel(
    const std::vector<float>& floatFeatures,
    const std::vector<std::string>&
) {
    return ApplyCatboostModel(floatFeatures);
}
