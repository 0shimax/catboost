### Types to hold CTR's data

class catboost_model_ctr(object):
    def __init__(self, base_hash, base_ctr_type, target_border_idx, prior_num, prior_denom, shift, scale):
        self.base_hash = base_hash
        self.base_ctr_type = base_ctr_type
        self.target_border_idx = target_border_idx
        self.prior_num = prior_num
        self.prior_denom = prior_denom
        self.shift = shift
        self.scale = scale

    def calc(self, count_in_class, total_count):
        ctr = (count_in_class + self.prior_num) / float(total_count + self.prior_denom)
        return (ctr + self.shift) * self.scale


class catboost_bin_feature_index_value(object):
    def __init__(self, bin_index, check_value_equal, value):
        self.bin_index = bin_index
        self.check_value_equal = check_value_equal
        self.value = value


class catboost_ctr_mean_history(object):
    def __init__(self, sum, count):
        self.sum = sum
        self.count = count


class catboost_ctr_value_table(object):
    def __init__(self, index_hash_viewer, target_classes_count, counter_denominator, ctr_mean_history, ctr_total):
        self.index_hash_viewer = index_hash_viewer
        self.target_classes_count = target_classes_count
        self.counter_denominator = counter_denominator
        self.ctr_mean_history = ctr_mean_history
        self.ctr_total = ctr_total

    def resolve_hash_index(self, hash):
        try:
            return self.index_hash_viewer[hash]
        except KeyError:
            return None


class catboost_ctr_data(object):
    def __init__(self, learn_ctrs):
        self.learn_ctrs = learn_ctrs


class catboost_projection(object):
    def __init__(self, transposed_cat_feature_indexes, binarized_indexes):
        self.transposed_cat_feature_indexes = transposed_cat_feature_indexes
        self.binarized_indexes = binarized_indexes


class catboost_compressed_model_ctr(object):
    def __init__(self, projection, model_ctrs):
        self.projection = projection
        self.model_ctrs = model_ctrs


class catboost_model_ctrs_container(object):
    def __init__(self, used_model_ctrs_count, compressed_model_ctrs, ctr_data):
        self.used_model_ctrs_count = used_model_ctrs_count
        self.compressed_model_ctrs = compressed_model_ctrs
        self.ctr_data = ctr_data


###  Model data
class catboost_model(object):
    float_features_index = [
        0, 1, 2, 3, 4, 5,
    ]
    float_feature_count = 6
    cat_feature_count = 11
    binary_feature_count = 20
    tree_count = 40
    float_feature_borders = [
        [18.5, 28.5, 34.5, 35.5, 36.5, 41.5, 45.5],
        [71939, 116831.5, 117562, 119180.5, 188654.5, 202819.5, 208500.5, 237801, 325462],
        [5.5, 8, 9.5, 10.5, 11.5, 12.5, 13.5, 15.5],
        [1087, 3280, 5842, 7493, 11356, 17537.5],
        [808.5, 1622.5, 1738, 1862, 1881.5, 2189.5],
        [11.5, 17, 19, 27, 31.5, 42, 44.5, 46.5, 49, 70]
    ]
    tree_depth = [6, 6, 5, 6, 6, 5, 6, 6, 6, 6, 6, 4, 6, 6, 4, 4, 6, 6, 4, 6, 6, 6, 3, 6, 6, 6, 6, 6, 3, 5, 4, 6, 2, 5, 6, 5, 6, 6, 5, 3]
    tree_split_border = [8, 2, 6, 5, 2, 7, 6, 7, 4, 4, 1, 6, 4, 3, 2, 8, 3, 8, 5, 6, 6, 5, 9, 4, 1, 4, 4, 10, 6, 7, 6, 5, 2, 2, 7, 2, 3, 1, 3, 4, 1, 7, 2, 255, 3, 4, 2, 3, 5, 3, 4, 2, 2, 1, 8, 5, 5, 6, 4, 5, 8, 8, 5, 5, 2, 5, 6, 4, 7, 6, 6, 4, 3, 3, 4, 4, 5, 2, 2, 5, 2, 1, 6, 8, 1, 3, 3, 3, 8, 3, 11, 1, 3, 2, 4, 7, 4, 5, 2, 3, 8, 5, 9, 5, 6, 5, 6, 7, 5, 6, 7, 1, 8, 5, 4, 4, 2, 4, 1, 6, 6, 10, 1, 3, 2, 6, 7, 2, 3, 9, 1, 3, 3, 7, 7, 255, 4, 2, 10, 1, 7, 1, 6, 3, 8, 2, 3, 4, 3, 1, 4, 6, 2, 2, 2, 8, 5, 2, 7, 8, 6, 6, 5, 5, 7, 7, 7, 7, 2, 5, 3, 3, 9, 7, 3, 1, 3, 5, 4, 3, 2, 1, 7, 1, 3, 3, 5, 1, 1, 5, 3, 2, 4, 5, 7, 6, 3, 3, 4, 4, 5, 1, 2, 7, 1, 1, 1, 2, 3, 4, 7]
    tree_split_feature_index = [5, 3, 4, 1, 15, 16, 16, 2, 3, 15, 5, 1, 16, 8, 3, 5, 0, 15, 2, 5, 7, 4, 7, 17, 9, 16, 8, 5, 2, 5, 0, 17, 8, 7, 14, 5, 1, 0, 8, 15, 8, 15, 3, 6, 0, 0, 3, 17, 7, 4, 5, 15, 3, 4, 1, 2, 7, 9, 17, 2, 1, 2, 0, 19, 13, 0, 15, 19, 14, 9, 4, 8, 3, 16, 12, 7, 10, 0, 1, 2, 17, 8, 8, 14, 9, 17, 19, 2, 5, 17, 10, 3, 7, 11, 12, 5, 7, 2, 3, 10, 14, 0, 10, 5, 7, 12, 1, 0, 15, 2, 14, 14, 7, 8, 10, 4, 7, 14, 11, 11, 2, 10, 13, 2, 10, 0, 15, 12, 15, 1, 16, 3, 17, 7, 2, 6, 11, 13, 10, 1, 5, 17, 3, 7, 14, 13, 11, 1, 2, 17, 9, 10, 9, 19, 3, 15, 9, 2, 14, 10, 8, 5, 16, 11, 5, 8, 0, 14, 16, 8, 14, 8, 5, 2, 12, 7, 9, 14, 13, 3, 18, 19, 1, 2, 5, 3, 13, 12, 15, 4, 10, 18, 2, 17, 10, 14, 13, 18, 2, 13, 3, 17, 4, 2, 3, 18, 10, 14, 18, 2, 9]
    tree_split_xor_mask = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    cat_features_index = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    one_hot_cat_feature_index = [9]
    one_hot_hash_values = [
        [-2114564283]
    ]
    ctr_feature_borders = [
        [0.999998987, 2.99999905, 3.99999905, 4.99999905, 5.99999905, 6.99999905, 8.99999905, 10.999999, 11.999999],
        [4.99999905, 5.99999905, 8.99999905, 9.99999905, 10.999999, 11.999999, 12.999999],
        [7.99999905, 8.99999905, 9.99999905, 10.999999, 11.999999, 12.999999, 14.999999],
        [0.999998987, 1.99999905, 2.99999905, 4.99999905, 6.99999905, 7.99999905, 9.99999905, 10.999999, 11.999999, 12.999999, 13.999999],
        [2.99999905, 3.99999905, 5.99999905, 7.99999905, 9.99999905, 11.999999],
        [3.99999905, 6.99999905, 9.99999905, 11.999999, 12.999999],
        [9.99999905, 10.999999, 12.999999, 13.999999, 14.999999],
        [0.999998987, 1.99999905, 4.99999905, 5.99999905, 6.99999905, 10.999999, 12.999999, 13.999999],
        [0.999998987, 1.99999905, 2.99999905, 3.99999905, 4.99999905, 6.99999905, 8.99999905, 9.99999905],
        [1.99999905, 3.99999905, 4.99999905, 8.99999905, 9.99999905, 11.999999, 12.999999],
        [9.99999905, 11.999999, 12.999999, 13.999999, 14.999999],
        [1.99999905, 9.99999905, 13.999999],
        [5.99999905, 7.99999905, 11.999999, 12.999999, 13.999999]
    ]

    ## Aggregated array of leaf values for trees. Each tree is represented by a separate line:
    leaf_values = [
        0.783752480412105, 0.7821782231330872, 0.7763118865907118, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7848971871538577, 0.7687694538933721, 0.7727920846652867, 0.7821782231330872, 0.7763118865907118, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7820650688264799, 0.7712623816933298, 0.7727920846652867, 0.7763118865907118, 0.7821782231330872, 0.7763118865907118, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7877793544130413, 0.7847920843970657, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7880127348830394, 0.7859123106530566, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.004054640901644743, 0, -0.003405029688836914, 0, 0, 0, -0.005822339019290917, 0, -0.004037269580811403, 0.005670354432955627, -0.01321122934015241, 0.001591654806325933, -0.009273504808704451, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00158990445284007, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.001896341675047456, 0.005695476096085938, -0.009028520802652342, 0.00160565763421283, -0.005822339019290917, 0, 0, 0,
        0.001591446554575274, 0.003110080112758972, 0.002368091668484588, 0.005651903583681797, 0, 0, 0, -0.005726389220929591, 0, 0, -0.005666686557488831, 0.003582362793519962, 0, 0, 0, 0, -0.009367244000403662, -0.002366885184592214, 0.00090647973464968, 0.00541042483807386, -0.005778671477622281, 0, -0.009237903141965056, -0.005726389220929591, -0.01143579037170106, 0, -0.01056556436943594, -0.001719289658315743, 0, -0.005778671477622281, 0, 0,
        -0.003365347373424429, -0.001802296819179406, -0.006570920429154065, 0.003063428912110323, -0.005684476745291401, 0, -0.01129815665143798, 0, 0.002572497423290302, 0.004382415247161267, -0.003436272114006239, 0.003073878069885205, 0.002706145807726441, 0, 0, 0.001536262256565371, -0.00577430785962397, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0056440130704549, 0.001661647666395019, 0, 0, 0, 0, 0, 0, 0, 0, 0.001865512086927872, 0.005329675157077261, -0.00332137935321463, 0.001810669945791889, -0.004239661484484254, 0.002464590237914892, -0.008979965539512276, 0.003151340042845451, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.005624186409257617, 0,
        -0.009122238390705126, 0, 0.001788700299095135, 0.001604750810419269, -0.005731000551644785, 0.001578457247403578, -0.005819996458520395, 0.00317660708798352, 0, 0, -0.001821549206201169, 0.002486225529255614, 0, 0, 0.0003588297885850461, 0.005447859980496118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.005496181958626362, 0, -0.005546249230038205, -0.009135295247560363, -0.005650595269517056, 0.001500887066422601, 0, 0.003066496067856784, 0, 0, -0.008527921177224302, 0.001599457907737618, 0, 0, -0.003238268814277495, 0.003141061864412446, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.00560168297337264, 0, 0, 0, 0, 0,
        0, 0, -0.009104444863835111, -0.01109106852336971, 0, 0, 0.001566618818312661, 0, 0, 0, -0.005776346486057145, 0, 0.002475326836762977, 0, -0.004594576546920599, 0, 0, 0, 0, 0, 0.001489630413676037, 0, 0, 0, 0.0009233138829555449, -0.008428419037197958, -0.003303877848244923, -0.005616600939513023, 0.005385659546080508, 0.003406116750434492, 0.002710097850271649, 0.002470368067577192,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.005630095482901776, 0, 0, 0.001574150228749378, -0.005583075504234761, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.003197777899113388, 0, 0, 0, 0, 0.002519985122473655, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.004310089914467049, -0.01553063796110536, 0.001385513915681356, 0, 0, 0, 0, 0, 0.002768442810089207, 0, 0.001505918570563352, 0, 0.003914418615756548, -0.003114334083659907, 0.001458060460340963, 0, 0.005243510962932889, -0.005082264890699077,
        0, -0.0006018988969443422, 0, 0.004723221032183618, 0, 0, 0, -0.00564154217959738, 0, 0.00405139011696792, 0, 0.004670853336404836, 0, 0, 0, 0, 0, 0.001652854913147926, 0, 0.001434360927340604, 0, 0, 0, 0, 0, 0, 0, 0.001434360927340604, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.01075789087002571, -0.00415322039236337, 0, 0.002362626319681295, 0, -0.01280283139291871, -0.005408553011772181, 0, 0, -0.00558786976772383, -0.003184569142087147, 0.004225229403547064, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0.001440984241564426, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.00321120165464247, -0.005445181205588288, 0.002694204472818779, 0, 0.00240605234173029, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.002669362373341012, 0, 0.004075305285749032, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.01342197324521837, -0.005367988865090568, 0.003809179067948127, 0, -0.001326473036771662, -0.0110710953180816, 0.005050254931965011, -0.005568276435890602, -0.005479370663379108, 0, 0, 0, -0.008264515831086996, 0, 0.001336376167341697, 0,
        -0.005326425937457565, 0, -0.005438275384322316, 0, -0.002939644547047404, 0, 0, 0, -0.005073948823876418, -0.005327728949502269, 0, 0, -0.00306536148289711, 0, 0, 0, 0.002569900261537024, 0, 0, 0, 0.004230242915665973, 0, 0, 0, 0.00317180678094762, 0, 0, 0, -0.004824298796217501, 0, 0, 0, 0.002442191506978328, 0, 0, 0, -0.005533599006187728, 0, 0, 0, -0.001628967136187236, -0.005404342347459196, 0, 0, 0, 0, 0, 0, 0.003448572968234284, -0.008673076749493528, 0.001326353346310661, 0, 0.003660518910082021, 0, 0.001595379192353279, 0, 0.004058110494381068, -0.00883416941177707, -0.01067529681468698, 0, 0.0006880983951071479, 0, 0.002516435298739455, 0,
        0, 0.003445377997206461, 0, 0.001276670151477802, 0, 0.001988437045943963, -0.003282066922041323, 0.001380565571634928, 0, 0, 0, 0, 0, 0, 0, 0, 0.001664419304646416, 0.002558186306724251, 0.001710767777612482, 0.001703690782262836, 0.001619144788916292, 0, 0, 0.001317792290890214, 0, 0, 0, 0, 0, 0, 0, 0, 0.004170169068052887, 0.004334020954904173, -0.006119433443905164, 0.003774536319484191, 0.002612466439389354, 0.003138994932916815, 0, 0.002802532741276463, 0, 0, 0, 0, 0, 0, 0, 0, -0.007923582334752316, 0.003352632338841635, -0.01189228806624302, -0.006763153157928292, -0.004011748294349467, 0.002838743375122805, -0.01077119681834703, 0.002746437582991726, 0, 0, 0, 0, 0, 0, 0.001779104722700356, 0,
        -0.003242682119857146, 0.002312286518068629, 0, 0.001697937019567178, 0, 0.003585688953144833, 0.00160700120327085, 0.003746879280099171, 0.004029512930561485, 0.002283488271947024, -0.007402768462335289, -0.008617617572752511, -0.002845067962249733, 0.004582103528082507, -0.01484261880817947, 0.003132609147027965,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.001685202492205063, 0.001571377494666611, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00338616198514367, -0.009070152470989535, 0.003384909247267386, -0.008595994373473453, 0, -0.005226741815096054, 0, 0, 0.004062687561440687, -0.002010497901354946, 0.004611606776741504, -0.002267922719845288, 0, 0, 0, -0.005105719319087209, 0, -0.005087259186197751, 0, -0.005248454002857522, 0, 0, 0, 0, 0, 0, 0, -0.01072699773586021, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0.002000389823352013, 0.002770886284705806, 0, 0, 0, 0, 0, 0, -0.0002542502184714814, 0.002388150039313043, 0, 0, 0, 0.002650169028920713, 0.001469156951391694, 0, 0.003526516145461285, 0.003506214146455734, -0.009566921895692592, 0.001469724905836752, -0.001318607288863869, 0.002736120283714187, 0, 0, 0.0008189152581051007, 0.003100587536277855, 0, 0, 0, 0, 0, 0, 0, 0.001198850557069416, 0, 0, 0, 0, 0, 0, -0.005200668945903532, 0.002457328364848023, 0, 0.00132474149608083, -0.005683740839099332, 0.002448324046278131, 0, 0, 0.001559592163720034, 0.002500790157636819, -0.009386879772387788, 0.00131110813724118, -0.00549284286280213, 0.002154836003623513, 0, 0, -0.009333544101952607, 0.003277076605983365,
        0, 0.001458701969289358, 0, 0.004347314960510535, 0, 0, 0.001654133511471611, 0.00445878221110099, -0.01122993727499108, -0.00511578933974512, -0.007838329159670136, -0.005731765694152497, 0, 0, -0.003453801487929143, -0.004309610181454544,
        0, 0, 0, 0.003351055138504741, -0.007975319661850376, 0.001825210067769636, 0, 0.004036394067681778, 0, 0.0005793746255166118, 0, 0.003523066463246379, -0.009615842309171055, -0.009191696913392547, 0.002183970222697176, 0.001481907552281097,
        0, 0, 0.001648798426282287, 0, 0, 0, 0.001400400500050468, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.002598575412266936, 0.001148820981899794, 0, 0, 0, 0, 0, 0, 0, 0, -0.01001259252557645, -0.007508037770870456, 7.021444834945563e-05, 0, 0, 0, 0, 0, 0, -0.004822359803048105, -0.005106815066645023, 0, 0, 0, 0, 0, -0.002939417639076111, -0.005024956222267081, 0.003700212477972542, 0.001184386708042355, 0.003545409747692671, -0.01278509978245201, 0.004088230325902904, 0.002801044610042925, -0.005089576944244081, 0, 0, 0, -0.008251604669170439, 0, -0.00314020427007904, 0,
        -0.007646230767772927, 0.00143085532010926, -0.004732326725864893, 0, 0.001122264554812672, 0.003116118915937864, 0.002193834351463087, 0, -0.002873321907151558, 0.002017858991331487, -0.004540099923677386, 0, -0.005564624994169313, 0.00271342150269137, -0.005122508642310016, 0.001175503807930586, 0, 0, 0, 0, -0.005051405118015457, 0, 0, 0, -0.005068513954501282, 0, -0.004786192105333656, 0, 0, 0, 0, 0, 0.00138989749653485, 0, 0, 0, 0.003806651062366121, 0.003723495731952642, -0.0008202046257291956, 0.001100216655144491, 0, 0, 0, 0, -0.0003637262204940326, 0.003596475132668466, -0.009777770560139966, 0.002478386717338391, 0, 0, 0, 0, 0, 0, -0.00512162529118055, 0, 0, 0, 0, 0, -0.008245537705456985, 0, 0, 0,
        0.001641483803279961, 0, 0, 0, 0.003489540240027374, 0.002628333283906627, 0.001123244436668467, 0.001572233996379132, 0.003249376579038061, -0.005522890307645885, 0.00379418336283504, -0.01230410622668977, 0.003723264186610606, 0.0008406593859389201, 0.003590066883320619, -0.006313454830314836,
        0.001353301714328614, 0.002026059471033714, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.001921679039948161, 0, 0.003251534380687749, 0, -0.001120261425492579, 0, 0.003254637005859013, -0.003616547372481574, -0.002160855004741608, 0, 0.001701222556486485, -0.007639360414803879, 0.004761359143409818, 0.001391667530863093, 0.001685826958124537, 0, 0.002333867378408914, 0, 0, 0, 0, 0, 0, -0.008041978735916947, 0, 0, 0.00155689256439009, 0, 0, 0, 0, 0, -0.007688448451639366, 0.001217524784317293, 0.002575837260911119, 0, -0.002835622792484323, 0.001849310881830333, 0.00255814496592469, -0.004413768380373362, -0.007913300241136826, 0, 0, -0.007401456589373651, -0.002568064577543774, 0, 0.002432539402310483,
        0, 0, 0.003815341022837166, -0.01252526185516583, 0, 0, 0, 0, 0, 0, 0.002816196334590856, 0, 0, 0, 0.0019966449087157, -0.004905032373666291, 0, 0, 0.001343151951698014, 0, 0, 0, 0, 0, 0, 0, 0.001952388045731966, 0, 0.001679560830459348, 0, 0.003879954589316288, -0.002035737694383412, 0, 0, 0, -0.004765759953363015, 0, 0, 0, 0, 0, 0, 0, -0.002095398429827992, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.001104565365025346, -0.004846242753159193,
        0.001628035025253975, 0, 0, 0, 0.001440101020519004, 0.002097511397176496, -0.01055021495627453, -0.005279654121842639, 0, 0, 0, 0, 0, 0.001038946045793304, 0.001352614967583234, 0.002409412540051573, 0, 0, 0, 0, 0, 0, -0.01059385997719257, -0.004688115028370093, 0, 0, 0, 0, 0, 0.001866694015621121, 0.001179778291607334, 0.002477444846851347, 0, 0.001750162964045324, 0.001333078312285443, 0.001364227753202504, 0, 0.002362606272320182, 0, 0.001443991807845438, 0, 0, 0, 0, 0, 0.002149585666381549, 0, 0.003212989655865744, 0, 0.001263521820130469, 0, 0, 0, 0.001129725138219325, 0, -0.009638971260979899, 0, 0, 0, 0, 0, 0.00220156364889116, 0, 0.00286368453637724,
        -0.007246313409166015, 0.001217009008678329, -0.01017764939663833, 0.0001643549199958055, 0.002753307690421704, 0.003675669374101121, -0.007817078700156816, 0.00242145025750051,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.003361372690441389, -0.005404052424959129, 0, 0, -7.300989538297504e-05, -0.002160170885269375, 0, 0, -0.002325272558015018, -0.009740715357312531, 0.002942499893021098, -0.0003434294657326678, 0, 0, 0, 0, 0, 0, 0, 0, -0.002943157541207434, 0, 0, 0, 0.002374900182051495, 0.002443820431666439, 0.002660536189132414, 0.003357832828169009,
        -0.004052607733881991, 0, 0.001687647464512004, 0, 1.746971406078471e-05, -0.004736113576611296, 0.002312623807436738, -0.004926818659520421, -0.006654152690280389, 0, 0, 0, -0.01068046118547132, 0, 0, 0, -0.004593967073818863, 0, 0.002757838197893755, 0, 0, 0, 0.002126381896354331, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.004720837609305955, -0.004427767478598878, 0.001024602104198372, 0, -0.001180588800221917, -0.004908575839779651, 0.003376195746472005, 0, 0.002108864243700534, 0, 0, -0.004665213326607531, -0.002385131404948073, 0, 0.001203741466877713, 0, 0, 0, 0.002804836099194376, 0, 0.003407015421040981, 0, 0.003170289252599593, 0, 0, 0, -0.00294059708653272, 0, 0, 0, 0, 0,
        0, 0, 0, 0.001539862485544311, -0.009460701233093793, 0, 0.000938865496133537, 0, 0, 0, 0, 0, -0.007220950963953646, 0, -0.006466517730509345, 0, 0, 0, 0, 0.002440779616821505, -0.007395954919650318, 0.001717795115165242, 0.0008963101152699964, 0.003493130401751237, 0, 0, -0.005017697827877475, 0, -0.00439455922325165, 0.002497417373251033, 0.00163295886835033, 0.002621183400300661, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.00488986752039994, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.004178249089461354, 0.002404983786235155, 0, 0.002383932549738872, 0, 0, 0, 0, 0, 0.00302028991243574, 0.001223420147412946, 0.001016016762987977, 0, 0, 0, 0, -0.007307203462598264, 0.001936307937556773, 0.001389181167583223, 0.003047414797707185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.005051537887598898, 0, 0.002860569320230401, -0.004832077119814126, 0, 0, 0, 0, 0, 0.001662106645735307, 0.001739877878068788, 0, 0.001267081718546394, 0, 0, -0.00830378234512031, -0.007565560942282926, 0.002335564386822816, 0.003328775519482508, -0.004643107690515814, -0.000741210077304548,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.005113557813475366, 0.002816649029631116, 0, 0, 0.001506859247738681, 0.003607645207682191, -0.008077619318309727, -0.001396422887740049, 0, 0, 0, 0, 0, 0, -0.004099001905893002, 0.002048987323470756, -0.00144625260932441, 0.0001822806749241699, 0, 0, -0.001804655932714761, 0.00297299219095276, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.004299321663617585, 0, 0, 0, 0, 0, 0, 0, 0, -0.004572895762119588, -0.004608284383615307, 0, 0, -0.004992386851219172, -0.007735501264864586,
        0, 0, 0.003769097431029786, 0.002796491903627591, -0.009893221170597863, 0.002838484365518638, -0.003294782915216633, 0.002295938048678746,
        0, -0.01047693831490926, 0.001739741118630853, 0, 0, -0.004513888173358489, 0.002207312043145533, 0.002194889530369319, 0, -0.006617530379820313, 0, 0, 0, -0.004339043168997586, 0, -0.005421728923514416, 0.003484646016140814, -0.007166648472180325, 0, 0, 0.002153088118895532, 0, 0.003007278775773604, -0.003713481339192913, 0.0009623717713217499, 0.002061289567789535, 0, 0, 0, 0, 0.00241596562505451, 0,
        0.0002534571878022155, 0.002997645977872918, -0.007372893580163796, 0.0009551539831981669, 0.002320050270641612, 0.002676846110438188, -0.004006741184685249, 0.001410043676949531, -0.003257612137755574, -0.0002651811008149954, -0.004843988980912188, 0.001092451997480124, -0.005778967106573763, 0.002317578192311502, -0.002075484573958268, 0.0009559485693319473,
        0, 0, 0.002713784404404402, 0, 0, 0, 0, 0, 0, 0, 0.002645245333710531, -0.01142499081901534, 0, 0, 0, 0, 0, 0, 0.0009203764918676006, 0, 0.001486331998937659, 0, 0.002813363305598698, 0, 0, 0, 0.0007728455365348623, -0.004924330866871066, 0, 0.001667785368993018, 0.002879348616478459, -0.0003357706509873474, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.007790543122799564, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.001992730142621282, 0, 0, 0, 0.0009479903284843012, 0.00273779261771395, 0, 0, 0.001396619381509487, -0.0109592460994892,
        -0.00150793597635692, -0.01160299643799006, 0.002714834468932887, -0.001463688078762076,
        0, 0, 0, 0, -0.008735482930146261, 0, -0.007193107153034168, -0.00178893163105734, 0, 0, 0.002365187482963401, 0.003099163854976961, 0.001189455437385047, 0.001445980197500407, 0.001699382218148738, 0.002865396142417255, 0, 0, 0, 0, -0.004037177609771179, 0, -0.004371780396809081, -0.007343624677937592, 0, 0, 0, 0, 0, 0, 0, -0.004711556926343441,
        0, 0, 0, 0, 0, 0, 0, 0, 0.0009514410143644227, 0, 0.0006722793810389713, 0, 0, 0, 0.00120030170581829, 0, 0.00188949836383634, 0, 0.001546340233462067, 0.001814033104635414, 0, 0, 0.0008986194892635773, 0, 0.002726882296740426, 0.00167915606118194, 0.001716847583680582, -0.005420927469063553, 0.002470151454141336, -0.002555297132409146, 0.002705489408129428, -0.002848794910792484, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.00433899204456589, -0.01014428314758597, 0, 0, 0, 0,
        0, 0, -0.007070556975509436, 0, 0, 0, -0.00972409059269006, 0.003131298514782902, 0, 0, 0, 0, 0, 0, -0.004035459075189634, 0, 0, 0, 0.001667127128918285, 0.002953830135145364, 0, 0, -0.001204246727254476, 0.002180749337168675, 0, 0, 0, 0, 0, 0, -0.004162797073413232, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.004106481699654745, -0.005306190394694602, 0, -0.008434388629194647, 0, 0, -0.006985710293699794, 0, 0.001702716602505113, 0.001109499072942882, 0.002778712038768476, -0.0106949151035762, 0, 0, 0, 0, 0, 0, 0, 0, 0.00223990477595292, 0, 0.002319853777480927, 0, 0, 0, 0.001420313098860508, 0, 0.002173698814156506, 0, 0.002063252260873782, 0, 0, 0, 0, 0, 0.002040308400250722, 0, 0.002112823842115807, 0, 0, 0, 0, 0, 0.002318020435003227, 0.001294095184023363, 0.002399969952414736, -0.004616493747942563,
        0, -0.0002483253702803426, 0.001633783335905927, -0.01053775403196414, 0, 0, 0.001409660750857153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.001689946228271765, -0.001904467184343635, -0.00210271886348823, -0.004536263868837262, 0.002621464128371946, 0.001284389470360128, 0.003057167619933679, 0, 0, 0, -0.004201027602796323, -0.00379462806534827, 0, 0, 0, -0.004581870045606894, 0, 0, 0, -0.00787670742036733, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.004075683087595737, 0.00153692015653684, 0, 0.002223962557071807, 0.0009110981734002606, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0.0008191473326692551, 0, 0, 0, 0, 0, 0, 0, 0.002563324463474674, 0, 0, 0, 0, 0, 0, -0.004169519896479602, -0.0007759631570686874, 0, 0, 0, 0, 0.001399088295462037, 0, 0, 0.001881976215074613, -0.007727400116992467, -0.009218194843649233, 0,
        0.001861435228512456, 0.0008438912971539836, 0.003160748218197723, -0.01193536502404672, 0.002493700868843274, -0.004718461501494189, -0.0008760812731701223, -0.004032970823944714
    ]
    model_ctrs = catboost_model_ctrs_container(
        used_model_ctrs_count = 13,
        compressed_model_ctrs = [
            catboost_compressed_model_ctr(
                projection = catboost_projection(
                    transposed_cat_feature_indexes = [3],
                    binarized_indexes = []
                ),
                model_ctrs = [
                    catboost_model_ctr(base_hash = 14216163332699387099, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0, prior_denom = 1, shift = -0, scale = 15),
                    catboost_model_ctr(base_hash = 14216163332699387099, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0.5, prior_denom = 1, shift = -0, scale = 15),
                    catboost_model_ctr(base_hash = 14216163332699387099, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 1, prior_denom = 1, shift = -0, scale = 15),
                    catboost_model_ctr(base_hash = 16890222057671696980, base_ctr_type = "Counter", target_border_idx = 0, prior_num = 0, prior_denom = 1, shift = -0, scale = 15)
                ]
            ),
            catboost_compressed_model_ctr(
                projection = catboost_projection(
                    transposed_cat_feature_indexes = [5],
                    binarized_indexes = []
                ),
                model_ctrs = [
                    catboost_model_ctr(base_hash = 14216163332699387101, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0, prior_denom = 1, shift = -0, scale = 15),
                    catboost_model_ctr(base_hash = 14216163332699387101, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0.5, prior_denom = 1, shift = -0, scale = 15),
                    catboost_model_ctr(base_hash = 14216163332699387101, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 1, prior_denom = 1, shift = -0, scale = 15),
                    catboost_model_ctr(base_hash = 16890222057671696978, base_ctr_type = "Counter", target_border_idx = 0, prior_num = 0, prior_denom = 1, shift = -0, scale = 15)
                ]
            ),
            catboost_compressed_model_ctr(
                projection = catboost_projection(
                    transposed_cat_feature_indexes = [7],
                    binarized_indexes = []
                ),
                model_ctrs = [
                    catboost_model_ctr(base_hash = 14216163332699387103, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0, prior_denom = 1, shift = -0, scale = 15),
                    catboost_model_ctr(base_hash = 14216163332699387103, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0.5, prior_denom = 1, shift = -0, scale = 15),
                    catboost_model_ctr(base_hash = 14216163332699387103, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 1, prior_denom = 1, shift = -0, scale = 15),
                    catboost_model_ctr(base_hash = 16890222057671696976, base_ctr_type = "Counter", target_border_idx = 0, prior_num = 0, prior_denom = 1, shift = -0, scale = 15)
                ]
            ),
            catboost_compressed_model_ctr(
                projection = catboost_projection(
                    transposed_cat_feature_indexes = [8],
                    binarized_indexes = []
                ),
                model_ctrs = [
                    catboost_model_ctr(base_hash = 16890222057671696975, base_ctr_type = "Counter", target_border_idx = 0, prior_num = 0, prior_denom = 1, shift = -0, scale = 15)
                ]
            )
        ],
        ctr_data = catboost_ctr_data(
            learn_ctrs = {
                14216163332699387099 :
                catboost_ctr_value_table(
                    index_hash_viewer = {18446744073709551615 : 0, 15379737126276794113 : 5, 18446744073709551615 : 0, 14256903225472974739 : 2, 18048946643763804916 : 4, 2051959227349154549 : 3, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 7024059537692152076 : 6, 18446744073709551615 : 0, 15472181234288693070 : 1, 8864790892067322495 : 0},
                    target_classes_count = 2,
                    counter_denominator = 0,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 1.4013e-44, count = 58), catboost_ctr_mean_history(sum = 1.4013e-45, count = 6), catboost_ctr_mean_history(sum = 1.4013e-45, count = 5), catboost_ctr_mean_history(sum = 4.2039e-45, count = 6), catboost_ctr_mean_history(sum = 0, count = 4), catboost_ctr_mean_history(sum = 2.8026e-45, count = 0), catboost_ctr_mean_history(sum = 7.00649e-45, count = 0)],
                    ctr_total = [10, 58, 1, 6, 1, 5, 3, 6, 0, 4, 2, 0, 5, 0]
                ),
                14216163332699387101 :
                catboost_ctr_value_table(
                    index_hash_viewer = {18446744073709551615 : 0, 18446744073709551615 : 0, 13987540656699198946 : 4, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18089724839685297862 : 5, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 10353740403438739754 : 2, 3922001124998993866 : 0, 13686716744772876732 : 1, 18293943161539901837 : 3, 18446744073709551615 : 0, 18446744073709551615 : 0},
                    target_classes_count = 2,
                    counter_denominator = 0,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 0, count = 37), catboost_ctr_mean_history(sum = 0, count = 4), catboost_ctr_mean_history(sum = 3.08286e-44, count = 20), catboost_ctr_mean_history(sum = 0, count = 13), catboost_ctr_mean_history(sum = 0, count = 2), catboost_ctr_mean_history(sum = 0, count = 3)],
                    ctr_total = [0, 37, 0, 4, 22, 20, 0, 13, 0, 2, 0, 3]
                ),
                14216163332699387103 :
                catboost_ctr_value_table(
                    index_hash_viewer = {3607388709394294015 : 5, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18356215166324018775 : 0, 18365206492781874408 : 4, 18446744073709551615 : 0, 18446744073709551615 : 0, 14559146096844143499 : 1, 18446744073709551615 : 0, 18446744073709551615 : 0, 11416626865500250542 : 3, 5549384008678792175 : 2},
                    target_classes_count = 2,
                    counter_denominator = 0,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 0, count = 14), catboost_ctr_mean_history(sum = 0, count = 22), catboost_ctr_mean_history(sum = 0, count = 22), catboost_ctr_mean_history(sum = 2.66247e-44, count = 17), catboost_ctr_mean_history(sum = 2.8026e-45, count = 3), catboost_ctr_mean_history(sum = 1.4013e-45, count = 1)],
                    ctr_total = [0, 14, 0, 22, 0, 22, 19, 17, 2, 3, 1, 1]
                ),
                16890222057671696975 :
                catboost_ctr_value_table(
                    index_hash_viewer = {18446744073709551615 : 0, 18446744073709551615 : 0, 8473802870189803490 : 2, 7071392469244395075 : 1, 18446744073709551615 : 0, 8806438445905145973 : 3, 619730330622847022 : 0, 18446744073709551615 : 0},
                    target_classes_count = 0,
                    counter_denominator = 82,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 1.68156e-44, count = 6), catboost_ctr_mean_history(sum = 1.14906e-43, count = 1)],
                    ctr_total = [12, 6, 82, 1]
                ),
                16890222057671696976 :
                catboost_ctr_value_table(
                    index_hash_viewer = {3607388709394294015 : 5, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18356215166324018775 : 0, 18365206492781874408 : 4, 18446744073709551615 : 0, 18446744073709551615 : 0, 14559146096844143499 : 1, 18446744073709551615 : 0, 18446744073709551615 : 0, 11416626865500250542 : 3, 5549384008678792175 : 2},
                    target_classes_count = 0,
                    counter_denominator = 36,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 1.96182e-44, count = 22), catboost_ctr_mean_history(sum = 3.08286e-44, count = 36), catboost_ctr_mean_history(sum = 7.00649e-45, count = 2)],
                    ctr_total = [14, 22, 22, 36, 5, 2]
                ),
                16890222057671696978 :
                catboost_ctr_value_table(
                    index_hash_viewer = {18446744073709551615 : 0, 18446744073709551615 : 0, 13987540656699198946 : 4, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18089724839685297862 : 5, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 10353740403438739754 : 2, 3922001124998993866 : 0, 13686716744772876732 : 1, 18293943161539901837 : 3, 18446744073709551615 : 0, 18446744073709551615 : 0},
                    target_classes_count = 0,
                    counter_denominator = 42,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 5.1848e-44, count = 4), catboost_ctr_mean_history(sum = 5.88545e-44, count = 13), catboost_ctr_mean_history(sum = 2.8026e-45, count = 3)],
                    ctr_total = [37, 4, 42, 13, 2, 3]
                ),
                16890222057671696980 :
                catboost_ctr_value_table(
                    index_hash_viewer = {18446744073709551615 : 0, 15379737126276794113 : 5, 18446744073709551615 : 0, 14256903225472974739 : 2, 18048946643763804916 : 4, 2051959227349154549 : 3, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 7024059537692152076 : 6, 18446744073709551615 : 0, 15472181234288693070 : 1, 8864790892067322495 : 0},
                    target_classes_count = 0,
                    counter_denominator = 68,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 9.52883e-44, count = 7), catboost_ctr_mean_history(sum = 8.40779e-45, count = 9), catboost_ctr_mean_history(sum = 5.60519e-45, count = 2)],
                    ctr_total = [68, 7, 6, 9, 4, 2, 5]
                )
            }
        )
    )


### Routines to compute CTRs

def calc_hash(a, b):
    max_int = 0xffFFffFFffFFffFF
    MAGIC_MULT = 0x4906ba494954cb65
    return (MAGIC_MULT * ((a + MAGIC_MULT * b) & max_int)) & max_int


def calc_hashes(binarized_features, hashed_cat_features, transposed_cat_feature_indexes, binarized_feature_indexes):
    result = 0
    for cat_feature_index in transposed_cat_feature_indexes:
        result = calc_hash(result, hashed_cat_features[cat_feature_index])
    for bin_feature_index in binarized_feature_indexes:
        binary_feature = binarized_features[bin_feature_index.bin_index]
        if not(bin_feature_index.check_value_equal):
            result = calc_hash(result, 1 if (binary_feature >= bin_feature_index.value) else 0)
        else:
            result = calc_hash(result, 1 if (binary_feature == bin_feature_index.value) else 0)
    return result


def calc_ctrs(model_ctrs, binarized_features, hashed_cat_features, result):
    ctr_hash = 0
    result_index = 0

    for i in range(len(model_ctrs.compressed_model_ctrs)):
        proj = model_ctrs.compressed_model_ctrs[i].projection
        ctr_hash = calc_hashes(binarized_features, hashed_cat_features, proj.transposed_cat_feature_indexes, proj.binarized_indexes)
        for j in range(len(model_ctrs.compressed_model_ctrs[i].model_ctrs)):
            ctr = model_ctrs.compressed_model_ctrs[i].model_ctrs[j]
            learn_ctr = model_ctrs.ctr_data.learn_ctrs[ctr.base_hash]
            ctr_type = ctr.base_ctr_type
            bucket = learn_ctr.resolve_hash_index(ctr_hash)
            if bucket is None:
                result[result_index] = ctr.calc(0, 0)
            else:
                if ctr_type == "BinarizedTargetMeanValue" or ctr_type == "FloatTargetMeanValue":
                    ctr_mean_history = learn_ctr.ctr_mean_history[bucket]
                    result[result_index] = ctr.calc(ctr_mean_history.sum, ctr_mean_history.count)
                elif ctr_type == "Counter" or ctr_type == "FeatureFreq":
                    ctr_total = learn_ctr.ctr_total
                    denominator = learn_ctr.counter_denominator
                    result[result_index] = ctr.calc(ctr_total[bucket], denominator)
                elif ctr_type == "Buckets":
                    ctr_history = learn_ctr.ctr_total
                    target_classes_count = learn_ctr.target_classes_count
                    total_count = 0
                    good_count = ctr_history[bucket * target_classes_count + ctr.target_border_idx];
                    for class_id in range(target_classes_count):
                        total_count += ctr_history[bucket * target_classes_count + class_id]
                    result[result_index] = ctr.calc(good_count, total_count)
                else:
                    ctr_history = learn_ctr.ctr_total;
                    target_classes_count = learn_ctr.target_classes_count;

                    if target_classes_count > 2:
                        good_count = 0
                        total_count = 0
                        for class_id in range(ctr.target_border_idx + 1):
                            total_count += ctr_history[bucket * target_classes_count + class_id]
                        for class_id in range(ctr.target_border_idx + 1, target_classes_count):
                            good_count += ctr_history[bucket * target_classes_count + class_id]
                        total_count += good_count;
                        result[result_index] = ctr.calc(good_count, total_count);
                    else:
                        result[result_index] = ctr.calc(ctr_history[bucket * 2 + 1], ctr_history[bucket * 2] + ctr_history[bucket * 2 + 1])
            result_index += 1



cat_features_hashes = {
    "Female": -2114564283,
    "Protective-serv": -2075156126,
    "Assoc-voc": -2029370604,
    "Married-civ-spouse": -2019910086,
    "Federal-gov": -1993066135,
    "Transport-moving": -1903253868,
    "Farming-fishing": -1888947309,
    "Prof-school": -1742589394,
    "Self-emp-inc": -1732053524,
    "?": -1576664757,
    "Handlers-cleaners": -1555793520,
    "0": -1438285038,
    "Philippines": -1437257447,
    "Male": -1291328762,
    "11th": -1209300766,
    "Unmarried": -1158645841,
    "Local-gov": -1105932163,
    "Divorced": -993514283,
    "Some-college": -870577664,
    "Asian-Pac-Islander": -787966085,
    "Sales": -760428919,
    "Self-emp-not-inc": -661998850,
    "Widowed": -651660490,
    "Masters": -453513993,
    "State-gov": -447941100,
    "Doctorate": -434936054,
    "White": -218697806,
    "Own-child": -189887997,
    "Amer-Indian-Eskimo": -86031875,
    "Exec-managerial": -26537793,
    "Husband": 60472414,
    "Italy": 117615621,
    "Not-in-family": 143014663,
    "n": 239748506,
    "Married-spouse-absent": 261588508,
    "Prof-specialty": 369959660,
    "Assoc-acdm": 475479755,
    "Adm-clerical": 495735304,
    "Bachelors": 556725573,
    "HS-grad": 580496350,
    "Craft-repair": 709691013,
    "Other-relative": 739168919,
    "Other-service": 786213683,
    "9th": 840896980,
    "Separated": 887350706,
    "10th": 888723975,
    "Mexico": 972041323,
    "Hong": 995245846,
    "1": 1121341681,
    "Tech-support": 1150039955,
    "Black": 1161225950,
    "Canada": 1510821218,
    "Wife": 1708186408,
    "United-States": 1736516096,
    "Never-married": 1959200218,
    "Machine-op-inspct": 2039859473,
    "7th-8th": 2066982375,
    "Private": 2084267031,
}

def hash_uint64(string):
    return cat_features_hashes.get(str(string), 0x7fFFffFF)


### Applicator for the CatBoost model

def apply_catboost_model(float_features, cat_features=[], ntree_start=0, ntree_end=catboost_model.tree_count):
    """
    Applies the model built by CatBoost.

    Parameters
    ----------

    float_features : list of float features

    cat_features : list of categorical features
        You need to pass float and categorical features separately in the same order they appeared in train dataset.
        For example if you had features f1,f2,f3,f4, where f2 and f4 were considered categorical, you need to pass here float_features=f1,f3, cat_features=f2,f4


    Returns
    -------
    prediction : formula value for the model and the features

    """
    if ntree_end == 0:
        ntree_end = catboost_model.tree_count
    else:
        ntree_end = min(ntree_end, catboost_model.tree_count)

    model = catboost_model

    assert len(float_features) >= model.float_feature_count
    assert len(cat_features) >= model.cat_feature_count

    # Binarise features
    binary_features = [0] * model.binary_feature_count
    binary_feature_index = 0

    for i in range(len(model.float_feature_borders)):
        for border in model.float_feature_borders[i]:
            binary_features[binary_feature_index] += 1 if (float_features[model.float_features_index[i]] > border) else 0
        binary_feature_index += 1
    transposed_hash = [0] * model.cat_feature_count
    for i in range(model.cat_feature_count):
        transposed_hash[i] = hash_uint64(cat_features[i])

    if len(model.one_hot_cat_feature_index) > 0:
        cat_feature_packed_indexes = {}
        for i in range(model.cat_feature_count):
            cat_feature_packed_indexes[model.cat_features_index[i]] = i
        for i in range(len(model.one_hot_cat_feature_index)):
            cat_idx = cat_feature_packed_indexes[model.one_hot_cat_feature_index[i]]
            hash = transposed_hash[cat_idx]
            for border_idx in range(len(model.one_hot_hash_values[i])):
                binary_features[binary_feature_index] |= (1 if hash == model.one_hot_hash_values[i][border_idx] else 0) * (border_idx + 1)
            binary_feature_index += 1

    if hasattr(model, 'model_ctrs') and model.model_ctrs.used_model_ctrs_count > 0:
        ctrs = [0.] * model.model_ctrs.used_model_ctrs_count;
        calc_ctrs(model.model_ctrs, binary_features, transposed_hash, ctrs)
        for i in range(len(model.ctr_feature_borders)):
            for border in model.ctr_feature_borders[i]:
                binary_features[binary_feature_index] += 1 if ctrs[i] > border else 0
            binary_feature_index += 1

    # Extract and sum values from trees
    result = 0.
    tree_splits_index = 0
    current_tree_leaf_values_index = 0
    for tree_id in range(ntree_start, ntree_end):
        current_tree_depth = model.tree_depth[tree_id]
        index = 0
        for depth in range(current_tree_depth):
            border_val = model.tree_split_border[tree_splits_index + depth]
            feature_index = model.tree_split_feature_index[tree_splits_index + depth]
            xor_mask = model.tree_split_xor_mask[tree_splits_index + depth]
            index |= ((binary_features[feature_index] ^ xor_mask) >= border_val) << depth
        result += model.leaf_values[current_tree_leaf_values_index + index]
        tree_splits_index += current_tree_depth
        current_tree_leaf_values_index += (1 << current_tree_depth)
    return result



